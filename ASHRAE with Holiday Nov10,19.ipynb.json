{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Import Library"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/feihuyan/anaconda3/lib/python3.7/site-packages/lightgbm/__init__.py:48: UserWarning: Starting from version 2.2.1, the library file in distribution wheels for macOS is built by the Apple Clang (Xcode_8.3.3) compiler.\n",
      "This means that in case of installing LightGBM from PyPI via the ``pip install lightgbm`` command, you don't need to install the gcc compiler anymore.\n",
      "Instead of that, you need to install the OpenMP library, which is required for running LightGBM on the system with the Apple Clang compiler.\n",
      "You can install the OpenMP library by the following command: ``brew install libomp``.\n",
      "  \"You can install the OpenMP library by the following command: ``brew install libomp``.\", UserWarning)\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import gc, math\n",
    "\n",
    "from pandas.tseries.holiday import USFederalHolidayCalendar as calendar\n",
    "from sklearn.metrics import mean_squared_error\n",
    "import lightgbm as lgb \n",
    "from sklearn.model_selection import KFold, StratifiedKFold, GroupKFold\n",
    "from tqdm import tqdm\n",
    "from sklearn.preprocessing import LabelEncoder"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "sns.set(rc={'figure.figsize':(11,8)})\n",
    "sns.set(style='whitegrid')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Read Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "building0 = pd.read_csv('/Users/feihuyan/Downloads/EnergyData/building_metadata.csv')\n",
    "train0 = pd.read_csv('/Users/feihuyan/Downloads/EnergyData/train.csv', parse_dates=['timestamp'])\n",
    "test0 = pd.read_csv('/Users/feihuyan/Downloads/EnergyData/test.csv', parse_dates=['timestamp'])\n",
    "weather_train0 = pd.read_csv('/Users/feihuyan/Downloads/EnergyData/weather_train.csv', parse_dates=['timestamp'])\n",
    "weather_test0 = pd.read_csv('/Users/feihuyan/Downloads/EnergyData/weather_test.csv', parse_dates=['timestamp'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "building = building0.copy()\n",
    "weather_train = weather_train0.copy()\n",
    "weather_test = weather_test0.copy()\n",
    "train = train0.copy()\n",
    "test = test0.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>site_id</th>\n",
       "      <th>timestamp</th>\n",
       "      <th>air_temperature</th>\n",
       "      <th>cloud_coverage</th>\n",
       "      <th>dew_temperature</th>\n",
       "      <th>precip_depth_1_hr</th>\n",
       "      <th>sea_level_pressure</th>\n",
       "      <th>wind_direction</th>\n",
       "      <th>wind_speed</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2016-01-01 00:00:00</td>\n",
       "      <td>25.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1019.7</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2016-01-01 01:00:00</td>\n",
       "      <td>24.4</td>\n",
       "      <td>NaN</td>\n",
       "      <td>21.1</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>1020.2</td>\n",
       "      <td>70.0</td>\n",
       "      <td>1.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2016-01-01 02:00:00</td>\n",
       "      <td>22.8</td>\n",
       "      <td>2.0</td>\n",
       "      <td>21.1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1020.2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>2016-01-01 03:00:00</td>\n",
       "      <td>21.1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>20.6</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1020.1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>2016-01-01 04:00:00</td>\n",
       "      <td>20.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>1020.0</td>\n",
       "      <td>250.0</td>\n",
       "      <td>2.6</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   index  site_id           timestamp  air_temperature  cloud_coverage  \\\n",
       "0      0        0 2016-01-01 00:00:00             25.0             6.0   \n",
       "1      1        0 2016-01-01 01:00:00             24.4             NaN   \n",
       "2      2        0 2016-01-01 02:00:00             22.8             2.0   \n",
       "3      3        0 2016-01-01 03:00:00             21.1             2.0   \n",
       "4      4        0 2016-01-01 04:00:00             20.0             2.0   \n",
       "\n",
       "   dew_temperature  precip_depth_1_hr  sea_level_pressure  wind_direction  \\\n",
       "0             20.0                NaN              1019.7             0.0   \n",
       "1             21.1               -1.0              1020.2            70.0   \n",
       "2             21.1                0.0              1020.2             0.0   \n",
       "3             20.6                0.0              1020.1             0.0   \n",
       "4             20.0               -1.0              1020.0           250.0   \n",
       "\n",
       "   wind_speed  \n",
       "0         0.0  \n",
       "1         1.5  \n",
       "2         0.0  \n",
       "3         0.0  \n",
       "4         2.6  "
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "weather_train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(20216100, 4)"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train0.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Leak UCF Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2260080\n"
     ]
    }
   ],
   "source": [
    "leak_df = pd.read_pickle('/Users/feihuyan/site0.pkl') \n",
    "leak_df['meter_reading'] = leak_df.meter_reading_scraped\n",
    "leak_df.drop(['meter_reading_original','meter_reading_scraped'], axis=1, inplace=True)\n",
    "leak_df.fillna(0, inplace=True)\n",
    "leak_df.loc[leak_df.meter_reading < 0, 'meter_reading'] = 0\n",
    "leak_df = leak_df[leak_df.timestamp.dt.year > 2016]\n",
    "print(len(leak_df))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "train = pd.concat([train, leak_df])\n",
    "train.reset_index(inplace=True)\n",
    "weather_train = pd.concat([weather_train, weather_test])\n",
    "weather_train.reset_index(inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "94"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "del weather_test, leak_df, #leak_meta_df\n",
    "gc.collect()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>building_id</th>\n",
       "      <th>meter</th>\n",
       "      <th>timestamp</th>\n",
       "      <th>meter_reading</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2016-01-01</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2016-01-01</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2016-01-01</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>2016-01-01</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>2016-01-01</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   index  building_id  meter  timestamp  meter_reading\n",
       "0      0            0      0 2016-01-01            0.0\n",
       "1      1            1      0 2016-01-01            0.0\n",
       "2      2            2      0 2016-01-01            0.0\n",
       "3      3            3      0 2016-01-01            0.0\n",
       "4      4            4      0 2016-01-01            0.0"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Mean Encoding\n",
    "- building['primary_use']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "traintemp = train.merge(building, on='building_id', how='left')\n",
    "traintemp = traintemp.merge(weather_train, on=['site_id','timestamp'], how='left')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "#traintemp['meter_reading'] = np.log1p(traintemp['meter_reading'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "primary_use\n",
       "Education                        4585.091840\n",
       "Entertainment/public assembly     473.880691\n",
       "Food sales and service            304.908018\n",
       "Healthcare                        738.597583\n",
       "Lodging/residential               279.710439\n",
       "Manufacturing/industrial          285.897005\n",
       "Office                            526.504420\n",
       "Other                             138.703786\n",
       "Parking                           169.386801\n",
       "Public services                   288.237846\n",
       "Religious worship                   5.375846\n",
       "Retail                            139.782388\n",
       "Services                         4113.468284\n",
       "Technology/science                138.204258\n",
       "Utility                           512.736861\n",
       "Warehouse/storage                  54.362314\n",
       "Name: meter_reading, dtype: float64"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "me = traintemp.groupby(['primary_use']).meter_reading.mean()\n",
    "me"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "pandas.core.series.Series"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(me)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>site_id</th>\n",
       "      <th>building_id</th>\n",
       "      <th>primary_use</th>\n",
       "      <th>square_feet</th>\n",
       "      <th>year_built</th>\n",
       "      <th>floor_count</th>\n",
       "      <th>primary_use_me</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Education</td>\n",
       "      <td>7432</td>\n",
       "      <td>2008.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4295.021946</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>Education</td>\n",
       "      <td>2720</td>\n",
       "      <td>2004.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4295.021946</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>Education</td>\n",
       "      <td>5376</td>\n",
       "      <td>1991.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4295.021946</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Education</td>\n",
       "      <td>23685</td>\n",
       "      <td>2002.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4295.021946</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>Education</td>\n",
       "      <td>116607</td>\n",
       "      <td>1975.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4295.021946</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   site_id  building_id primary_use  square_feet  year_built  floor_count  \\\n",
       "0        0            0   Education         7432      2008.0          NaN   \n",
       "1        0            1   Education         2720      2004.0          NaN   \n",
       "2        0            2   Education         5376      1991.0          NaN   \n",
       "3        0            3   Education        23685      2002.0          NaN   \n",
       "4        0            4   Education       116607      1975.0          NaN   \n",
       "\n",
       "   primary_use_me  \n",
       "0     4295.021946  \n",
       "1     4295.021946  \n",
       "2     4295.021946  \n",
       "3     4295.021946  \n",
       "4     4295.021946  "
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "building['primary_use_me'] = building['primary_use'].map(me)\n",
    "building.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Impute Building Floor Count by Square Feet by Mice"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>square_feet</th>\n",
       "      <th>floor_count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>7432</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2720</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>5376</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>23685</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>116607</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   square_feet  floor_count\n",
       "0         7432          NaN\n",
       "1         2720          NaN\n",
       "2         5376          NaN\n",
       "3        23685          NaN\n",
       "4       116607          NaN"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "buildinga = building[['square_feet', 'floor_count']]\n",
    "buildinga.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/feihuyan/anaconda3/lib/python3.7/site-packages/impyute/util/preprocess.py:52: FutureWarning: Method .as_matrix will be removed in a future version. Use .values instead.\n",
      "  args[0] = args[0].as_matrix()\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>square_feet</th>\n",
       "      <th>floor_count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>7432.0</td>\n",
       "      <td>2.623014</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2720.0</td>\n",
       "      <td>2.541934</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>5376.0</td>\n",
       "      <td>2.587636</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>23685.0</td>\n",
       "      <td>2.902681</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>116607.0</td>\n",
       "      <td>4.501599</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   square_feet  floor_count\n",
       "0       7432.0     2.623014\n",
       "1       2720.0     2.541934\n",
       "2       5376.0     2.587636\n",
       "3      23685.0     2.902681\n",
       "4     116607.0     4.501599"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from impyute.imputation.cs import mice\n",
    "buildinga = mice(buildinga)\n",
    "buildinga.columns=['square_feet', 'floor_count']\n",
    "buildinga.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>site_id</th>\n",
       "      <th>building_id</th>\n",
       "      <th>primary_use</th>\n",
       "      <th>year_built</th>\n",
       "      <th>primary_use_me</th>\n",
       "      <th>square_feet</th>\n",
       "      <th>floor_count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Education</td>\n",
       "      <td>2008.0</td>\n",
       "      <td>4295.021946</td>\n",
       "      <td>7432.0</td>\n",
       "      <td>2.623014</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>Education</td>\n",
       "      <td>2004.0</td>\n",
       "      <td>4295.021946</td>\n",
       "      <td>2720.0</td>\n",
       "      <td>2.541934</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>Education</td>\n",
       "      <td>1991.0</td>\n",
       "      <td>4295.021946</td>\n",
       "      <td>5376.0</td>\n",
       "      <td>2.587636</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Education</td>\n",
       "      <td>2002.0</td>\n",
       "      <td>4295.021946</td>\n",
       "      <td>23685.0</td>\n",
       "      <td>2.902681</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>Education</td>\n",
       "      <td>1975.0</td>\n",
       "      <td>4295.021946</td>\n",
       "      <td>116607.0</td>\n",
       "      <td>4.501599</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   site_id  building_id primary_use  year_built  primary_use_me  square_feet  \\\n",
       "0        0            0   Education      2008.0     4295.021946       7432.0   \n",
       "1        0            1   Education      2004.0     4295.021946       2720.0   \n",
       "2        0            2   Education      1991.0     4295.021946       5376.0   \n",
       "3        0            3   Education      2002.0     4295.021946      23685.0   \n",
       "4        0            4   Education      1975.0     4295.021946     116607.0   \n",
       "\n",
       "   floor_count  \n",
       "0     2.623014  \n",
       "1     2.541934  \n",
       "2     2.587636  \n",
       "3     2.902681  \n",
       "4     4.501599  "
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "buildingnotfull = building.drop(['square_feet','floor_count'],axis=1)\n",
    "building = pd.concat([buildingnotfull, buildinga], axis=1)\n",
    "building.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Weather Local Time Alignment "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Align Timestamp\n",
    "#weather = pd.concat([weather_train, weather_test],ignore_index=True)\n",
    "#weather_key=['site_id', 'timestamp']\n",
    "\n",
    "#temp_skeleton = weather[weather_key + ['air_temperature']].drop_duplicates(subset=weather_key).sort_values(by=weather_key).copy()\n",
    "\n",
    "#calculate ranks of hourly temperatures within date/site_id chunks\n",
    "#temp_skeleton['temp_rank'] = temp_skeleton.groupby(['site_id', temp_skeleton.timestamp.dt.date])['air_temperature'].rank('average')\n",
    "\n",
    "#create a df of site_id(0-16) * mean hour rank of temperature within day (0-23)\n",
    "#df_2d = temp_skeleton.groupby(['site_id', temp_skeleton.timestamp.dt.hour])['temp_rank'].mean().unstack(level=1)\n",
    "\n",
    "# Subtract the columnID of temperature peak by 14, getting the timestamp alignment gap.\n",
    "#site_ids_offsets = pd.Series(df_2d.values.argmax(axis=1) - 14)\n",
    "#site_ids_offsets.index.name = 'site_id'\n",
    "\n",
    "#def timestamp_align(df):\n",
    "#    df['offset'] = df.site_id.map(site_ids_offsets)\n",
    "#    df['timestamp_aligned'] = (df.timestamp - pd.to_timedelta(df.offset, unit='H'))\n",
    "#    df['timestamp'] = df['timestamp_aligned']\n",
    "#    del df['timestamp_aligned']\n",
    "#    return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "#temp_skeleton.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "#weather_train = timestamp_align(weather_train)\n",
    "#weather_test = timestamp_align(weather_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "#del weather \n",
    "#del df_2d\n",
    "#del temp_skeleton\n",
    "#del site_ids_offsets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 286,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "site_id                   0\n",
       "timestamp                 0\n",
       "air_temperature          55\n",
       "cloud_coverage        69173\n",
       "dew_temperature         113\n",
       "precip_depth_1_hr     50289\n",
       "sea_level_pressure    10618\n",
       "wind_direction         6268\n",
       "wind_speed              304\n",
       "offset                    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 286,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#weather_train.isna().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Weather Interpolation\n",
    "- Air Temperature\n",
    "- Cloud Coverage (Partial)\n",
    "- Dew Temperature\n",
    "- Precip Depth (Partial)\n",
    "- Sea Level (Partial)\n",
    "- Wind Direction\n",
    "- Wind Speed"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 287,
   "metadata": {},
   "outputs": [],
   "source": [
    "weather_train = weather_train.groupby('site_id').apply(lambda group: group.interpolate(limit_direction='both'))\n",
    "weather_test = weather_test.groupby('site_id').apply(lambda group: group.interpolate(limit_direction='both'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 288,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "site_id                   0\n",
       "timestamp                 0\n",
       "air_temperature           0\n",
       "cloud_coverage        17228\n",
       "dew_temperature           0\n",
       "precip_depth_1_hr     26273\n",
       "sea_level_pressure     8755\n",
       "wind_direction            0\n",
       "wind_speed                0\n",
       "offset                    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 288,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "weather_train.isna().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###### Target Value -> Log"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 289,
   "metadata": {},
   "outputs": [],
   "source": [
    "train['meter_reading'] = np.log1p(train['meter_reading'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###### Reduce Mem Func"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 290,
   "metadata": {},
   "outputs": [],
   "source": [
    "def reduce_mem_usage(df, verbose=True):\n",
    "    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n",
    "    start_mem = df.memory_usage().sum() / 1024**2    \n",
    "    for col in df.columns:\n",
    "        col_type = df[col].dtypes\n",
    "        if col_type in numerics:\n",
    "            c_min = df[col].min()\n",
    "            c_max = df[col].max()\n",
    "            if str(col_type)[:3] == 'int':\n",
    "                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n",
    "                    df[col] = df[col].astype(np.int8)\n",
    "                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n",
    "                    df[col] = df[col].astype(np.int16)\n",
    "                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n",
    "                    df[col] = df[col].astype(np.int32)\n",
    "                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n",
    "                    df[col] = df[col].astype(np.int64)  \n",
    "            else:\n",
    "                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n",
    "                    df[col] = df[col].astype(np.float16)\n",
    "                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n",
    "                    df[col] = df[col].astype(np.float32)\n",
    "                else:\n",
    "                    df[col] = df[col].astype(np.float64)    \n",
    "    end_mem = df.memory_usage().sum() / 1024**2\n",
    "    if verbose: print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'.format(end_mem, 100 * (start_mem - end_mem) / start_mem))\n",
    "    return df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###### Categorical Encoding "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 291,
   "metadata": {},
   "outputs": [],
   "source": [
    "le = LabelEncoder()\n",
    "building['primary_use'] = le.fit_transform(building['primary_use'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###### Reduce Mem"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 292,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mem. usage decreased to  0.02 Mb (74.9% reduction)\n",
      "Mem. usage decreased to 450.13 Mb (47.5% reduction)\n",
      "Mem. usage decreased to 596.49 Mb (53.1% reduction)\n",
      "Mem. usage decreased to  3.20 Mb (70.0% reduction)\n",
      "Mem. usage decreased to  6.35 Mb (70.0% reduction)\n"
     ]
    }
   ],
   "source": [
    "building = reduce_mem_usage(building)\n",
    "train = reduce_mem_usage(train)\n",
    "test = reduce_mem_usage(test)\n",
    "weather_train = reduce_mem_usage(weather_train)\n",
    "weather_test = reduce_mem_usage(weather_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 293,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Traning data shape: (22476180, 4)\n",
      "Weather training shape: (139773, 10)\n",
      "Weather testing shape: (277243, 10)\n",
      "Building data shape: (1449, 7)\n",
      "Test data shape: (41697600, 4)\n"
     ]
    }
   ],
   "source": [
    "print(f'Traning data shape: {train.shape}')\n",
    "print(f'Weather training shape: {weather_train.shape}')\n",
    "print(f'Weather testing shape: {weather_test.shape}')\n",
    "print(f'Building data shape: {building.shape}')\n",
    "print(f'Test data shape: {test.shape}')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Merge DataFrame"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 294,
   "metadata": {},
   "outputs": [],
   "source": [
    "full_train_df = train.merge(building, on='building_id', how='left')\n",
    "full_train_df = full_train_df.merge(weather_train, on=['site_id', 'timestamp'], how='left')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 295,
   "metadata": {},
   "outputs": [],
   "source": [
    "full_train_df = full_train_df.loc[~(full_train_df['air_temperature'].isnull() & full_train_df['cloud_coverage'].isnull() & full_train_df['dew_temperature'].isnull() & full_train_df['precip_depth_1_hr'].isnull() & full_train_df['sea_level_pressure'].isnull() & full_train_df['wind_direction'].isnull() & full_train_df['wind_speed'].isnull() & full_train_df['offset'].isnull())]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 296,
   "metadata": {},
   "outputs": [],
   "source": [
    "full_test_df = test.merge(building, on='building_id', how='left')\n",
    "full_test_df = full_test_df.merge(weather_test, on=['site_id', 'timestamp'], how='left')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 297,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 792x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax = sns.barplot(le.inverse_transform(full_train_df.groupby(['primary_use']).size().reset_index(name='counts')['primary_use']), full_train_df.groupby(['primary_use']).size().reset_index(name='counts')['counts'])\n",
    "ax.set(xlabel='Primary Usage', ylabel='# of records', title='Primary Usage vs. # of records')\n",
    "ax.set_xticklabels(ax.get_xticklabels(), rotation=50, ha=\"right\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 298,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 792x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "meter_types = {0: 'electricity', 1: 'chilledwater', 2: 'steam', 3: 'hotwater'}\n",
    "ax = sns.barplot(np.vectorize(meter_types.get)(pd.unique(full_train_df['meter'])), full_train_df['meter'].value_counts())\n",
    "ax.set(xlabel='Meter Type', ylabel='# of records', title='Meter type vs. # of records')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 299,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Average meter reading: nan kWh\n"
     ]
    }
   ],
   "source": [
    "# Average meter reading\n",
    "print (f'Average meter reading: {full_train_df.meter_reading.mean()} kWh')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 300,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAApcAAAHwCAYAAADzdUTuAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4zLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvnQurowAAIABJREFUeJzt3Xl4U3W+x/FPmm7sFRVGQK9QpCCIKBcExaktyiZ0gcpSKIKOgFdZ1BkpWBARvFK5IEXFBbdRlEUpiwKDgMuVfRWrSJV9rUhlLS1t+rt/8JBrR0oK/JI28H49zzzSJOecb9Iz4c1JTuIwxhgBAAAAFgSU9gAAAAC4fBCXAAAAsIa4BAAAgDXEJQAAAKwhLgEAAGANcQkAAABriEsA57V3715FRESoV69ef7ouOTlZERERys7OPu869uzZo4EDB17yLK+88oqWLFlyyevxpYiICEVHR+vfP/Vt8uTJioiI0Pfff3/e5Y8fP67evXtf8hzJycm6++67FRsbq9jYWHXq1EmtW7fWW2+9dcnr/qOOHTtq9erVysrKUvfu3a2uG4B/CCztAQCUfSEhIdqxY4f27dunmjVrSpJycnK0YcOGEi2/f/9+7dix45LnWL16terWrXvJ6/E1Y4zWrVunZs2auX9euHChqlSp4nHZo0ePegzQkurTp48efvhh98/79+9Xhw4dFB0drfDwcCvbOKt69eqaPn261XUC8A/EJQCPnE6n2rdvr/nz52vAgAGSpMWLF6t169Z655133LdbtmyZpkyZovz8fIWGhmro0KFq3LixUlJSlJWVpYcfflhvv/22NmzYoPHjx+vUqVMKCAjQ448/rqioKM2ePVuffPKJTp06pYoVK+qDDz5wr3vatGnKyMhQamqqTp8+reeff14zZ85U7dq1JZ0Jp169emnJkiUKCQnRTz/9pMOHD+uuu+5SSkqKgoKCtG3bNo0dO1ZHjhyRy+VSUlKSEhISitzXb7/9VuPGjdP8+fMlSceOHVPr1q21ZMkSff7555o+fbqCgoIUEhKi0aNHlyh2Y2JiNG/ePHdcrl+/XnXr1lVubq77NsU9JsOGDVNubq5iY2M1e/Zs7dy585z3YfXq1Ro7dqzKly+vkydP6tNPP1VwcPB55zp48KCMMapYseJ5Z8jJydGoUaO0a9cuHTlyRBUqVND48eNVp04d/fLLLxo+fLhOnTqlOnXqKCcnR9KZI96dOnXSxo0bNXnyZO3bt0+HDh3Svn37VL16db300kuqVq2aNm/erFGjRik/P1833HCD9u/fr+TkZN1xxx0eH1cAZZQBgPPYs2ePadKkifn+++9Nu3bt3Jc/+OCDZuvWraZevXrm8OHDZseOHaZjx44mOzvbGGNMZmamueuuu8zJkyfNqlWrzP3332+MMebIkSOmTZs2Zs+ePcYYYw4ePGj++te/mn379plPP/3UNGvWzBw/fvycs/Tq1cssXLjQGGPMmDFjzLhx44wxxuzatctERkaagoICM3ToUBMXF2dOnDhh8vLyTM+ePc0HH3xg8vPzTYcOHUxGRoYxxphjx46Z9u3bm40bNxbZRmFhoYmKijKbN282xhgzbdo089RTT5mCggLTsGFDk5WVZYwxJj093UyfPt3j41evXj2TmZlp7rjjDpOXl2eMMWb48OFm2bJl7u2c7zE5+/gbY857H1atWmXq169v9u7de845hg4dalq1amViYmJMdHS0ad68uXn00UfNypUrPf5eFi5caJ5//nn3ukaMGGFGjx5tjDEmNjbWzJw50xhjzLp160xERIRZtWpVkbnT0tJM69at3b/X/v37m0mTJpn8/Hzz17/+1Xz11VfGGGNWrlzpXh6A/+LIJYASadSokZxOpzIyMnT11Vfr5MmTqlevnvv65cuX69dff1WfPn3clzkcDu3evbvIejZt2qRDhw7pscceK3K7rVu3SjrzHsWzR9LOJzExUb169dITTzyhGTNmKCEhQU6nU5IUHx+vChUqSJJiY2O1dOlStWjRQrt379bw4cPd68jNzdWPP/6oJk2aFJmlS5cuSk9P1y233KLZs2fr6aefltPpVLt27dS9e3fdc889atWqlSIjI0v02F199dVq3LixvvzyS0VGRmrdunV67rnnSvSY3HTTTe7Ldu7cWex9CA8P13XXXed+28K5nH1ZPCcnR0888YSCg4PdRwjPN0O7du10/fXX64MPPtCuXbu0Zs0a3Xbbbfr999+1detWxcXFSZKaNm1aZN4/at68ufv3evPNN+vo0aPKzMyUJPfj2KJFi2KXB+A/iEsAJXb25d2qVasqNja2yHWFhYVq2bKlXn75ZfdlBw4cULVq1bRu3Tr3ZS6XS+Hh4Zo1a5b7sqysLFWtWlXz589X+fLlSzRL7dq1FRERoaVLl+qzzz7TzJkz3dedjUzpzPsbAwIC5HK5VKlSJc2dO9d93W+//aZKlSr9ad0JCQmKj4/XAw88oOPHj6t58+aSpPHjxyszM1MrVqzQm2++qblz52rSpEklmjcuLk7z5s3T6dOnFR0drcDA/3/6Pd9jkpWVVeR2xd2HTZs2lfixK1++vFJTU9WhQwe999576tu373ln+OijjzRz5kz17NlTnTp1UlhYmPbu3eu+nfnDyUp/vF9/FBoa6v6zw+GQMUZOp/NPJzr98XcHwD9xtjiAEouNjdWiRYu0YMECdezYsch1LVu21PLly7Vt2zZJ0tdff62YmBjl5ubK6XQqPz9fktSkSRPt2rVLa9eulSRt2bJFbdu2LRJRxXE6nSooKHD/nJiYqNTUVDVu3FjVq1d3X75w4UKdPn1aeXl5Sk9PV1RUlGrXrq3Q0FB3mB04cEAdO3ZURkbGn7ZTvXp1NW7cWCNHjnS/JzM7O1uRkZEKCwtTnz59NGTIkAs60aZ169bauHGjpk2bpvj4+CLXne8xCQwMlMvlkjHmgu6DJ1WqVNHQoUOVlpamrKys887w7bffumO7du3aWrZsmVwul6666io1bNjQHaQ//PCD+2hkSYSHhys4OFjffPONJGnz5s3KzMyUw+G44PsDoOzgyCWAEqtevbrCw8NVqVIlhYWFFbmubt26Gj16tJ588kkZYxQYGKgpU6aoQoUKqlu3rkJCQpSQkKBZs2YpLS1NqampysvLkzFGqampqlWrltasWXPe7UdHR2vChAnKz89XfHy8oqKilJKS8qePvAkNDVViYqKOHTumtm3bqkuXLgoICNBrr72msWPHaurUqSooKNDgwYPVtGnTc27rgQce0ODBgzVlyhRJUtWqVfXoo4+qT58+Cg0NldPp1JgxYyRJH3/8sTIyMjR27NhiZw8JCVF0dLR+/PHHIm8nOLvu4h4Tl8ulxo0b6/7779e0adOKvQ+rV68+72N3LjExMZo1a5bGjRunCRMmFDvDQw89pJEjR+qTTz6RdCaGz0bkhAkTNGzYME2fPl033HCD6tSpU+LtBwYGavLkyXr22Wc1YcIE3XjjjbrmmmuKHOUE4H8c5t9fkwAAP7Fx40alpKTos88+cx/tSk5O1k033VTkI3dQdo0bN04PP/ywrrnmGh04cECxsbFasmSJKleuXNqjAbhIHLkE4JeGDh2qNWvWaOLEibyM6sdq1qypPn36KDAwUMYYjRkzhrAE/BxHLgEAAGANJ/QAAADAmjL3snhhYaFOnjypoKAgXuoCAAAoRcYY5efnq0KFCgoIKNkxyTIXlydPnrygj7IAAACAd9WrV++cnwt8LmUuLoOCgiSduROevhcXAAAA3nP69GllZma6+6wkylxcnn0pPDg4WCEhIaU8DQAAAC7krYqc0AMAAABriEsAAABYQ1wCAADAGuISAAAA1hCXAAAAsIa4BAAAgDXEJQAAAKwhLgEAAGANcQkAAABriEsAAABYQ1wCAADAGuISAAAA1hCXAAAAsIa4BAAAgDXEJQAAAKwhLgEAAGANcQkAAABriEsAAABYQ1wCQBl0uiC/tEeAj/C7xuUmsLQHAAD8WXBgkPq8O7i0x4APvNd3UmmPAFjFkUsAAABYQ1wCAADAGuISAAAA1hCXAAAAsMarJ/QkJSUpOztbgYFnNjN69Gjdeuut3twkAAAASpHX4tIYo507d+rLL790xyUAAAAub157WXz79u2SpIceekgxMTH68MMPvbUpAAAAlBFeO6R47NgxtWzZUiNGjFB+fr569+6t2rVr66677vLWJgEAAFDKvBaXt912m2677Tb3zwkJCfr6669LHJcZGRneGg0AyrymTZuW9gjwofXr15f2CIA1XovLdevWKT8/Xy1btpR05j2YF/Ley0aNGikkJMRb4wEAUGbwjwmUVXl5eRd8wM9r77k8fvy4UlNTlZeXpxMnTig9PV333XeftzYHAACAMsBrRy6joqL03XffKS4uToWFhUpMTCzyMjkAAAAuP179jKAhQ4ZoyJAh3twEAAAAyhC+oQcAAADWEJcAAACwhrgEAACANcQlAAAArCEuAQAAYA1xCQAAAGuISwAAAFhDXAIAAMAa4hIAAADWEJcAAACwhrgEAACANcQlAAAArCEuAQAAYA1xCQAAAGuISwAAAFhDXAIAAMAa4hIAAADWEJcAAACwhrgEAACANcQlAAAArCEuAQAAYA1xCQAAAGuISwAAAFhDXAIAAMAa4hIAAADWEJcAAACwhrgEAACANcQlAAAArCEuAQAAYA1xCQAAAGuISwAAAFhDXAIAAMAa4hIAAADWEJcAAACwhrgEAACANcQlAAAArCEuAQAAYA1xCQAA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1ctHjyK8ZfLkyeatt94yxpx53ps6darp1auXWbVqlTHGmG7dupkffvjBGGPMzz//bNq0aWOMMWbMmDFmxYoVxhhjdu/ebZo0aWKMOfM81blzZ5Ofn29Wr15t6tevb37++WeTn59v7rvvPrNlyxZf30X40KpVq0yTJk3M7t27jcvlMl26dDHvvfeeuffee012drYxxhT5e/Ls3408X5Uejlz60MqVK7V582Z17txZkpSbm1vk0P2KFSu0fft2paWlSZIKCgq0Z88erV27VuPHj5ckRUREaMaMGedc/6233vqny9auXasJEyZIkiIjIxUZGam9e/eec/nOnTurb9++Gjx4sNLT0/Xkk09e/J2FV61du1bt27dXcHCwgoODNXfuXCUlJenee++VJNWtW1e///67x/WsXr1au3btUteuXSVJ+fn5uvnmm7Vx40bddtttuuaaayRJnTp10qpVqxQeHq4TJ07o6NGjWrdunRITE7VmzRqVK1dOkZGRCggI0Kuvvqply5Zpx44dWrNmjQIC/vzum+L2dUl8TexloGXLlho4cKC2bNmiyMhI9erVS1999ZUk6eTJk8rIyNCwYcPct8/JydHvv/+u5ORk/e///q/eeOMNZWZmKicnx32bu+66S4GBgapRo4auvfZa1a1bV9KZt/kcPXrUp/cPvle/fn1df/31kqTw8HAdP35cUVFRuuqqqyRJ3bp1K7JPnb0dz1elg7j0IZfLpQcffFB9+/aVJB07dkwHDx7UgAEDJEmFhYV6//33FRYWJkn69ddfdfXVVyswMLDISz7btm1T7dq1/7T+c718HRj4/79iY4y2bdum0NDQc85Xq1Yt1ahRQ4sXL9bhw4fPGasoG/59n9i7d69ycnLkdDolqcQvEbpcLrVv314pKSmSzvzF73K5tHLlyiL/8PnjfnT33Xfriy++kMPhUHR0tCZNmiSHw6FBgwbp5MmTSkhIUExMjJo1a6aIiAhNmzbtT9stbl9fsmRJsfsn/EfTpk31+eef66uvvtKCBQuUnp7uvq6wsND9D6KzDh48qLCwMA0aNEiVK1dWVFSUOnToUOSEiqCgIPef/7g/4srwx9+5w+FQ5cqVdezYMfdlxhgVFBT8aTmer0oHJ/T4UIsWLTR37lydPHlSBQUFeuyxx5SRkVHk+o8++kiS9Msvv6hTp046deqU/vM//1Off/65pDNh+cgjj8jhcMjpdHp8g/wfl12xYoVGjBhR5Hqn01nk/5BdunTRmDFjFBMTY+U+wzuaNWumxYsXKz8/X6dOndLf/vY3ZWVlXfB67rjjDn3xxRc6fPiwjDEaNWqU3n//fTVt2lSbNm1SVlaWCgsLtWDBAvcykZGReuONN9S0aVM1aNBA27Zt044dO3TzzTdr586dcjgcGjBggHvdZ/fRP+6vxe3ruDykpqZq3rx5io+P18iRI/Xjjz+6f/+VKlXSjTfe6I7L5cuXq2fPnu4/Dxo0SPfee6+++eYbSeIkIBRr2bJlOnLkiKQzZ3ffcccdkoo+1/B8VTr4558PRUdH66efflLXrl3lcrl09913q1mzZu7rU1JSNHLkSHXq1EnSmSfoihUratCgQUpJSVFMTIwCAwOVmpoqh8Ohe+65R/369dPUqVOL3ebIkSOVkpKijz76SOXKldOYMWOKXN+sWTMNHTpU11xzjZKSktSmTRuNGDFCsbGx3nkQYMV9992njIwMde7cWYWFherdu7cWLlx4weupX7++Hn/8cT344IMqLCxUgwYN1K9fP4WEhCglJUV9+vRRuXLl3C9BSmeC9NChQ2revLkcDocaNGjgfmmqfv36atCggdq3by+Hw6FWrVpp/fr1kqQ777xTEyZMUKVKlYrd13F5SEpK0lNPPaXZs2fL6XRq3Lhx2rZtm5599lmNGzdOL730kkaNGqWpU6cqKCjIfULOwIEDlZiYqJCQENWvX181a9Ys9m08uLJVrFhR/fv3V1JSkvLz89WwYUM999xzklTk70aer0qHw5hLPF8flw1jjL755ht9/PHHev3110t7HAAA4Ic4cgm3F154QV9++eV5PyMTAADgfDhyCQAAAGs4oQcAAADWEJcAAACwhrgEAACANcQlgMva3r17FRERoV69ev3puuTkZEVERCg7O/u869izZ48GDhx4SXPMmTNHsbGxio2NVfPmzXX33Xe7f163bt0lrRsAyhLOFgdw2QsJCdGOHTu0b98+1axZU9KZrxzcsGFDiZbfv3+/duzYcUkzxMXFKS4uTtKZqL3pppv08MMPX9I6AaAs4sglgMue0+lU+/btNX/+fPdlixcvVuvWrYvcbtmyZXrggQcUFxen7t27a+PGjXK5XEpJSdHu3bvdMbhhwwYlJiYqPj5eXbp00ZdffilJmj17tvvypKSkEs+3f/9+3X777Tp+/LikM58527ZtW/30009KSkrSf//3fyshIUGtW7d2f7/x+eYAgNLEkUsAV4S4uDj94x//0IABAySdeZl6+PDheueddyRJO3fu1MSJE/XPf/5TV111lX7++Wf17dtXixcv1pgxY/T888/r7bff1tGjRzVs2DC9/fbbqlWrlrKystS1a1dFRERIOvP1cMuWLbugb/CoUaOGWrRooXnz5qlnz55atWqVwsLCVL9+fUnSjh079PHHH+vUqVPq2rWrbrnlFt1+++3FzlGjRg3Ljx4AlBxxCeCK0KhRIzmdTmVkZOjqq6/WyZMnVa9ePff1y5cv16+//qo+ffq4L3M4HNq9e3eR9WzatEmHDh3SY489VuR2W7dulSRFRERc1FfD9ezZUy+99JJ69uypGTNmqEePHu7runXrpqCgIAUFBaldu3b69ttvFRAQUOwcxCWA0kRcArhixMTEaN68eapatapiY2OLXFdYWKiWLVvq5Zdfdl924MABVatWrcgJNy6XS+Hh4Zo1a5b7sqysLFWtWlXz589X+fLlL2q2O++8U6dOndLKlSu1bt06jRs3zn1dYOD/P1UbYxQQEHDeOQCgNPGeSwBXjNjYWC1atEgLFixQx44di1zXsmVLLV++XNu2bZMkff3114qJiVFubq6cTqfy8/MlSU2aNNGuXbu0du1aSdKWLVvUtm1bZWVlXdJsDodDiYmJeuaZZ9SxY0eFhIS4r5s3b54KCwt19OhRLVy4UNHR0V6bAwAuFUcuAVwxqlevrvDwcFWqVElhYWFFrqtbt65Gjx6tJ598UsYYBQYGasqUKapQoYLq1q2rkJAQJSQkaNasWUpLS1Nqaqry8vJkjFFqaqpq1aqlNWvWXNJ88fHxGjdunLp161bk8tzcXCUkJOjkyZNKTExUy5YtJanYOQCgNPHd4gBQRnz++edKT0/X1KlT3ZclJSWpZ8+eateuXSlOBgAlx5FLACgDkpKSlJ2drddee620RwGAS8KRSwAAAFjDCT0AAACwhrgEAACANcQlAAAArCEuAQAAYA1xCQAAAGv+D4GojGZJUSqzAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 792x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax = sns.barplot(np.vectorize(meter_types.get)(full_train_df.groupby(['meter'])['meter_reading'].mean().keys()), full_train_df.groupby(['meter'])['meter_reading'].mean())\n",
    "ax.set(xlabel='Meter Type', ylabel='Meter reading', title='Meter type vs. Meter Reading')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 301,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1008x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(1,1,figsize=(14, 6))\n",
    "ax.set(xlabel='Year Built', ylabel='# Of Buildings', title='Buildings built in each year')\n",
    "full_train_df['year_built'].value_counts(dropna=False).sort_index().plot(ax=ax)\n",
    "full_test_df['year_built'].value_counts(dropna=False).sort_index().plot(ax=ax)\n",
    "ax.legend(['Train', 'Test']);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 302,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x504 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(1,1,figsize=(15, 7))\n",
    "full_train_df.groupby(['building_id'])['square_feet'].mean().plot(ax=ax)\n",
    "ax.set(xlabel='Building ID', ylabel='Area in Square Feet', title='Square Feet area of buildings')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 303,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>NaN Count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>year_built</th>\n",
       "      <td>12105206</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>precip_depth_1_hr</th>\n",
       "      <td>1646098</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>sea_level_pressure</th>\n",
       "      <td>779195</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>cloud_coverage</th>\n",
       "      <td>476553</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>offset</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>meter</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>timestamp</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>meter_reading</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>site_id</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>primary_use</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>square_feet</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>primary_use_me</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>wind_speed</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>floor_count</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>air_temperature</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>dew_temperature</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>wind_direction</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>building_id</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    NaN Count\n",
       "year_built           12105206\n",
       "precip_depth_1_hr     1646098\n",
       "sea_level_pressure     779195\n",
       "cloud_coverage         476553\n",
       "offset                      0\n",
       "meter                       0\n",
       "timestamp                   0\n",
       "meter_reading               0\n",
       "site_id                     0\n",
       "primary_use                 0\n",
       "square_feet                 0\n",
       "primary_use_me              0\n",
       "wind_speed                  0\n",
       "floor_count                 0\n",
       "air_temperature             0\n",
       "dew_temperature             0\n",
       "wind_direction              0\n",
       "building_id                 0"
      ]
     },
     "execution_count": 303,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.DataFrame(full_train_df.isna().sum().sort_values(ascending=False), columns=['NaN Count'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## More Imputation for Rest of the Data "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 304,
   "metadata": {},
   "outputs": [],
   "source": [
    "def mean_without_overflow_fast(col):\n",
    "    col /= len(col)\n",
    "    return col.mean() * len(col)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 305,
   "metadata": {},
   "outputs": [],
   "source": [
    "missing_values = (100-full_train_df.count() / len(full_train_df) * 100).sort_values(ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 306,
   "metadata": {},
   "outputs": [],
   "source": [
    "missing_features = full_train_df.loc[:, missing_values > 0.0]\n",
    "missing_features = missing_features.apply(mean_without_overflow_fast)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 307,
   "metadata": {},
   "outputs": [],
   "source": [
    "for key in full_train_df.loc[:, missing_values > 0.0].keys():\n",
    "    if key == 'year_built' or key == 'floor_count':\n",
    "        #full_train_df[key].fillna(math.floor(missing_features[key]), inplace=True)\n",
    "        full_test_df[key].fillna(math.floor(missing_features[key]), inplace=True)\n",
    "    else:\n",
    "        full_train_df[key].fillna(missing_features[key], inplace=True)\n",
    "        full_test_df[key].fillna(missing_features[key], inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 308,
   "metadata": {},
   "outputs": [],
   "source": [
    "full_train_df[\"timestamp\"] = pd.to_datetime(full_train_df[\"timestamp\"])\n",
    "full_test_df[\"timestamp\"] = pd.to_datetime(full_test_df[\"timestamp\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Split Time Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 309,
   "metadata": {},
   "outputs": [],
   "source": [
    "def transform(df):\n",
    "    df['hour'] = np.uint8(df['timestamp'].dt.hour)\n",
    "    df['day'] = np.uint8(df['timestamp'].dt.day)\n",
    "    df['weekday'] = np.uint8(df['timestamp'].dt.weekday)\n",
    "    df['month'] = np.uint8(df['timestamp'].dt.month)\n",
    "    df['year'] = np.uint8(df['timestamp'].dt.year-1900)\n",
    "    \n",
    "    df['square_feet'] = np.log(df['square_feet'])\n",
    "    \n",
    "    return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 310,
   "metadata": {},
   "outputs": [],
   "source": [
    "full_train_df = transform(full_train_df)\n",
    "full_test_df = transform(full_test_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 311,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>building_id</th>\n",
       "      <th>meter</th>\n",
       "      <th>timestamp</th>\n",
       "      <th>meter_reading</th>\n",
       "      <th>site_id</th>\n",
       "      <th>primary_use</th>\n",
       "      <th>year_built</th>\n",
       "      <th>primary_use_me</th>\n",
       "      <th>square_feet</th>\n",
       "      <th>floor_count</th>\n",
       "      <th>...</th>\n",
       "      <th>precip_depth_1_hr</th>\n",
       "      <th>sea_level_pressure</th>\n",
       "      <th>wind_direction</th>\n",
       "      <th>wind_speed</th>\n",
       "      <th>offset</th>\n",
       "      <th>hour</th>\n",
       "      <th>day</th>\n",
       "      <th>weekday</th>\n",
       "      <th>month</th>\n",
       "      <th>year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2016-01-01</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2008.0</td>\n",
       "      <td>4296.0</td>\n",
       "      <td>8.913550</td>\n",
       "      <td>2.623047</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1019.5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>116</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2016-01-01</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2004.0</td>\n",
       "      <td>4296.0</td>\n",
       "      <td>7.908387</td>\n",
       "      <td>2.541016</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1019.5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>116</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2016-01-01</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1991.0</td>\n",
       "      <td>4296.0</td>\n",
       "      <td>8.589700</td>\n",
       "      <td>2.587891</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1019.5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>116</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>2016-01-01</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2002.0</td>\n",
       "      <td>4296.0</td>\n",
       "      <td>10.072598</td>\n",
       "      <td>2.902344</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1019.5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>116</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>2016-01-01</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1975.0</td>\n",
       "      <td>4296.0</td>\n",
       "      <td>11.666565</td>\n",
       "      <td>4.500000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1019.5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>116</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 23 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   building_id  meter  timestamp  meter_reading  site_id  primary_use  \\\n",
       "0            0      0 2016-01-01            0.0        0            0   \n",
       "1            1      0 2016-01-01            0.0        0            0   \n",
       "2            2      0 2016-01-01            0.0        0            0   \n",
       "3            3      0 2016-01-01            0.0        0            0   \n",
       "4            4      0 2016-01-01            0.0        0            0   \n",
       "\n",
       "   year_built  primary_use_me  square_feet  floor_count  ...  \\\n",
       "0      2008.0          4296.0     8.913550     2.623047  ...   \n",
       "1      2004.0          4296.0     7.908387     2.541016  ...   \n",
       "2      1991.0          4296.0     8.589700     2.587891  ...   \n",
       "3      2002.0          4296.0    10.072598     2.902344  ...   \n",
       "4      1975.0          4296.0    11.666565     4.500000  ...   \n",
       "\n",
       "   precip_depth_1_hr  sea_level_pressure  wind_direction  wind_speed  offset  \\\n",
       "0                0.0              1019.5             0.0         0.0     5.0   \n",
       "1                0.0              1019.5             0.0         0.0     5.0   \n",
       "2                0.0              1019.5             0.0         0.0     5.0   \n",
       "3                0.0              1019.5             0.0         0.0     5.0   \n",
       "4                0.0              1019.5             0.0         0.0     5.0   \n",
       "\n",
       "   hour  day  weekday  month  year  \n",
       "0     0    1        4      1   116  \n",
       "1     0    1        4      1   116  \n",
       "2     0    1        4      1   116  \n",
       "3     0    1        4      1   116  \n",
       "4     0    1        4      1   116  \n",
       "\n",
       "[5 rows x 23 columns]"
      ]
     },
     "execution_count": 311,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "full_train_df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Holiday Feature"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 312,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Holiday\n",
    "dates_range = pd.date_range(start='2015-12-31', end='2019-01-01')\n",
    "us_holidays = calendar().holidays(start=dates_range.min(), end=dates_range.max())\n",
    "full_train_df['is_holiday'] = (full_train_df['timestamp'].dt.date.astype('datetime64').isin(us_holidays)).astype(np.int8)\n",
    "full_test_df['is_holiday'] = (full_test_df['timestamp'].dt.date.astype('datetime64').isin(us_holidays)).astype(np.int8)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 313,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Assuming 5 days a week for all the given buildings\n",
    "full_train_df.loc[(full_train_df['weekday'] == 5) | (full_train_df['weekday'] == 6) , 'is_holiday'] = 1\n",
    "full_test_df.loc[(full_test_df['weekday']) == 5 | (full_test_df['weekday'] == 6) , 'is_holiday'] = 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [],
   "source": [
    "# full_train_df.loc[(full_train_df['primary_use'] == le.transform(['Education'])[0]) & (full_train_df['month'] >= 6) & (full_train_df['month'] <= 8), 'is_vacation_month'] = np.int8(1)\n",
    "# full_train_df.loc[full_train_df['is_vacation_month']!=1, 'is_vacation_month'] = np.int8(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 314,
   "metadata": {},
   "outputs": [],
   "source": [
    "full_train_df = full_train_df.query('not (building_id <= 104 & meter == 0 & timestamp <= \"2016-05-20\")')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 315,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape of training dataset: (19766435, 23)\n",
      "Shape of testing dataset: (41697600, 23)\n"
     ]
    }
   ],
   "source": [
    "full_test_df = full_test_df.drop(['timestamp'], axis=1)\n",
    "full_train_df = full_train_df.drop(['timestamp'], axis=1)\n",
    "print (f'Shape of training dataset: {full_train_df.shape}')\n",
    "print (f'Shape of testing dataset: {full_test_df.shape}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 316,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mem. usage decreased to 848.28 Mb (15.1% reduction)\n",
      "Mem. usage decreased to 1869.00 Mb (14.5% reduction)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "39"
      ]
     },
     "execution_count": 316,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "full_train_df = reduce_mem_usage(full_train_df)\n",
    "full_test_df = reduce_mem_usage(full_test_df)\n",
    "gc.collect()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###### Beaufort"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 317,
   "metadata": {},
   "outputs": [],
   "source": [
    "beaufort = [(0, 0, 0.3), (1, 0.3, 1.6), (2, 1.6, 3.4), (3, 3.4, 5.5), (4, 5.5, 8), (5, 8, 10.8), (6, 10.8, 13.9), \n",
    "          (7, 13.9, 17.2), (8, 17.2, 20.8), (9, 20.8, 24.5), (10, 24.5, 28.5), (11, 28.5, 33), (12, 33, 200)]\n",
    "\n",
    "for item in beaufort:\n",
    "    full_train_df.loc[(full_train_df['wind_speed']>=item[1]) & (full_train_df['wind_speed']<item[2]), 'beaufort_scale'] = item[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 318,
   "metadata": {},
   "outputs": [],
   "source": [
    "full_train_df['group'] = full_train_df['month']\n",
    "full_train_df['group'].replace((1,2,3,4,5,6), 1,inplace=True)\n",
    "full_train_df['group'].replace((7,8,9,10,11,12), 2, inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###### Cyclic Feature"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 319,
   "metadata": {},
   "outputs": [],
   "source": [
    "def encode_cyclic_feature(df, col, max_vals):\n",
    "    df[col + '_sin'] = np.sin(2 * np.pi * df[col]/max_vals)\n",
    "#   df[col + '_cos'] = np.cos(2 * np.pi * df[col]/max_vals)\n",
    "    del df[col]\n",
    "    return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 320,
   "metadata": {},
   "outputs": [],
   "source": [
    "full_train_df = encode_cyclic_feature(full_train_df, 'weekday', 7)\n",
    "full_train_df = encode_cyclic_feature(full_train_df, 'hour', 24)\n",
    "full_train_df = encode_cyclic_feature(full_train_df, 'day', 31)\n",
    "full_train_df = encode_cyclic_feature(full_train_df, 'month', 12)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 321,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mem. usage decreased to 980.24 Mb (41.6% reduction)\n"
     ]
    }
   ],
   "source": [
    "full_train_df = reduce_mem_usage(full_train_df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Check Data "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "total = full_train_df.isnull().sum().sort_values(ascending=False)\n",
    "percent = (full_train_df.isnull().sum()/full_train_df.isnull().count()).sort_values(ascending=False)\n",
    "missing_perc = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\n",
    "missing_perc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 263,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>building_id</th>\n",
       "      <th>meter</th>\n",
       "      <th>site_id</th>\n",
       "      <th>primary_use</th>\n",
       "      <th>year_built</th>\n",
       "      <th>primary_use_me</th>\n",
       "      <th>square_feet</th>\n",
       "      <th>floor_count</th>\n",
       "      <th>air_temperature</th>\n",
       "      <th>cloud_coverage</th>\n",
       "      <th>...</th>\n",
       "      <th>wind_speed</th>\n",
       "      <th>offset</th>\n",
       "      <th>year</th>\n",
       "      <th>is_holiday</th>\n",
       "      <th>beaufort_scale</th>\n",
       "      <th>group</th>\n",
       "      <th>weekday_sin</th>\n",
       "      <th>hour_sin</th>\n",
       "      <th>day_sin</th>\n",
       "      <th>month_sin</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>103</th>\n",
       "      <td>105</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4584.00</td>\n",
       "      <td>10.835938</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>3.800781</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>3.099609</td>\n",
       "      <td>0.0</td>\n",
       "      <td>116</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>-0.433838</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.201294</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>104</th>\n",
       "      <td>106</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4584.00</td>\n",
       "      <td>8.585938</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>3.800781</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>3.099609</td>\n",
       "      <td>0.0</td>\n",
       "      <td>116</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>-0.433838</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.201294</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>105</th>\n",
       "      <td>106</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4584.00</td>\n",
       "      <td>8.585938</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>3.800781</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>3.099609</td>\n",
       "      <td>0.0</td>\n",
       "      <td>116</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>-0.433838</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.201294</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>106</th>\n",
       "      <td>107</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2005.0</td>\n",
       "      <td>4584.00</td>\n",
       "      <td>11.484375</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>3.800781</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>3.099609</td>\n",
       "      <td>0.0</td>\n",
       "      <td>116</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>-0.433838</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.201294</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>107</th>\n",
       "      <td>108</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1913.0</td>\n",
       "      <td>4584.00</td>\n",
       "      <td>11.312500</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>3.800781</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>3.099609</td>\n",
       "      <td>0.0</td>\n",
       "      <td>116</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>-0.433838</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.201294</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>108</th>\n",
       "      <td>109</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1953.0</td>\n",
       "      <td>4584.00</td>\n",
       "      <td>10.953125</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>3.800781</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>3.099609</td>\n",
       "      <td>0.0</td>\n",
       "      <td>116</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>-0.433838</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.201294</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>109</th>\n",
       "      <td>109</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1953.0</td>\n",
       "      <td>4584.00</td>\n",
       "      <td>10.953125</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>3.800781</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>3.099609</td>\n",
       "      <td>0.0</td>\n",
       "      <td>116</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>-0.433838</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.201294</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110</th>\n",
       "      <td>110</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2006.0</td>\n",
       "      <td>4584.00</td>\n",
       "      <td>10.234375</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>3.800781</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>3.099609</td>\n",
       "      <td>0.0</td>\n",
       "      <td>116</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>-0.433838</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.201294</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>111</th>\n",
       "      <td>111</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1909.0</td>\n",
       "      <td>4584.00</td>\n",
       "      <td>11.679688</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>3.800781</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>3.099609</td>\n",
       "      <td>0.0</td>\n",
       "      <td>116</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>-0.433838</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.201294</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>112</th>\n",
       "      <td>112</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4584.00</td>\n",
       "      <td>10.382812</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>3.800781</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>3.099609</td>\n",
       "      <td>0.0</td>\n",
       "      <td>116</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>-0.433838</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.201294</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>113</th>\n",
       "      <td>112</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4584.00</td>\n",
       "      <td>10.382812</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>3.800781</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>3.099609</td>\n",
       "      <td>0.0</td>\n",
       "      <td>116</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>-0.433838</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.201294</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>114</th>\n",
       "      <td>113</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1958.0</td>\n",
       "      <td>4584.00</td>\n",
       "      <td>11.515625</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>3.800781</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>3.099609</td>\n",
       "      <td>0.0</td>\n",
       "      <td>116</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>-0.433838</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.201294</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>115</th>\n",
       "      <td>113</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1958.0</td>\n",
       "      <td>4584.00</td>\n",
       "      <td>11.515625</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>3.800781</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>3.099609</td>\n",
       "      <td>0.0</td>\n",
       "      <td>116</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>-0.433838</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.201294</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>116</th>\n",
       "      <td>114</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1958.0</td>\n",
       "      <td>4584.00</td>\n",
       "      <td>11.843750</td>\n",
       "      <td>13.000000</td>\n",
       "      <td>3.800781</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>3.099609</td>\n",
       "      <td>0.0</td>\n",
       "      <td>116</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>-0.433838</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.201294</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>117</th>\n",
       "      <td>114</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1958.0</td>\n",
       "      <td>4584.00</td>\n",
       "      <td>11.843750</td>\n",
       "      <td>13.000000</td>\n",
       "      <td>3.800781</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>3.099609</td>\n",
       "      <td>0.0</td>\n",
       "      <td>116</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>-0.433838</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.201294</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>118</th>\n",
       "      <td>115</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1968.0</td>\n",
       "      <td>4584.00</td>\n",
       "      <td>11.773438</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>3.800781</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>3.099609</td>\n",
       "      <td>0.0</td>\n",
       "      <td>116</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>-0.433838</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.201294</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>119</th>\n",
       "      <td>116</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4584.00</td>\n",
       "      <td>10.523438</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>3.800781</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>3.099609</td>\n",
       "      <td>0.0</td>\n",
       "      <td>116</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>-0.433838</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.201294</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>120</th>\n",
       "      <td>117</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2004.0</td>\n",
       "      <td>4584.00</td>\n",
       "      <td>9.648438</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>3.800781</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>3.099609</td>\n",
       "      <td>0.0</td>\n",
       "      <td>116</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>-0.433838</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.201294</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>121</th>\n",
       "      <td>117</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2004.0</td>\n",
       "      <td>4584.00</td>\n",
       "      <td>9.648438</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>3.800781</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>3.099609</td>\n",
       "      <td>0.0</td>\n",
       "      <td>116</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>-0.433838</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.201294</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>122</th>\n",
       "      <td>118</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1960.0</td>\n",
       "      <td>4584.00</td>\n",
       "      <td>11.835938</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>3.800781</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>3.099609</td>\n",
       "      <td>0.0</td>\n",
       "      <td>116</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>-0.433838</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.201294</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>123</th>\n",
       "      <td>119</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2007.0</td>\n",
       "      <td>4584.00</td>\n",
       "      <td>11.421875</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>3.800781</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>3.099609</td>\n",
       "      <td>0.0</td>\n",
       "      <td>116</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>-0.433838</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.201294</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>124</th>\n",
       "      <td>119</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2007.0</td>\n",
       "      <td>4584.00</td>\n",
       "      <td>11.421875</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>3.800781</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>3.099609</td>\n",
       "      <td>0.0</td>\n",
       "      <td>116</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>-0.433838</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.201294</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>125</th>\n",
       "      <td>120</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1976.0</td>\n",
       "      <td>4584.00</td>\n",
       "      <td>11.132812</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>3.800781</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>3.099609</td>\n",
       "      <td>0.0</td>\n",
       "      <td>116</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>-0.433838</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.201294</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>126</th>\n",
       "      <td>121</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1906.0</td>\n",
       "      <td>4584.00</td>\n",
       "      <td>11.921875</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>3.800781</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>3.099609</td>\n",
       "      <td>0.0</td>\n",
       "      <td>116</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>-0.433838</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.201294</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>127</th>\n",
       "      <td>121</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1906.0</td>\n",
       "      <td>4584.00</td>\n",
       "      <td>11.921875</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>3.800781</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>3.099609</td>\n",
       "      <td>0.0</td>\n",
       "      <td>116</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>-0.433838</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.201294</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>128</th>\n",
       "      <td>122</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1991.0</td>\n",
       "      <td>4584.00</td>\n",
       "      <td>11.328125</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>3.800781</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>3.099609</td>\n",
       "      <td>0.0</td>\n",
       "      <td>116</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>-0.433838</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.201294</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>129</th>\n",
       "      <td>123</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1989.0</td>\n",
       "      <td>4584.00</td>\n",
       "      <td>11.023438</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>3.800781</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>3.099609</td>\n",
       "      <td>0.0</td>\n",
       "      <td>116</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>-0.433838</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.201294</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>130</th>\n",
       "      <td>124</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1900.0</td>\n",
       "      <td>4584.00</td>\n",
       "      <td>10.554688</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>3.800781</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>3.099609</td>\n",
       "      <td>0.0</td>\n",
       "      <td>116</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>-0.433838</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.201294</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>131</th>\n",
       "      <td>125</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1995.0</td>\n",
       "      <td>4584.00</td>\n",
       "      <td>9.726562</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>3.800781</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>3.099609</td>\n",
       "      <td>0.0</td>\n",
       "      <td>116</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>-0.433838</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.201294</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>132</th>\n",
       "      <td>126</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2004.0</td>\n",
       "      <td>4584.00</td>\n",
       "      <td>9.976562</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>3.800781</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>3.099609</td>\n",
       "      <td>0.0</td>\n",
       "      <td>116</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>-0.433838</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.201294</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20215226</th>\n",
       "      <td>1039</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4584.00</td>\n",
       "      <td>10.312500</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>6.500000</td>\n",
       "      <td>8.0</td>\n",
       "      <td>...</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>116</td>\n",
       "      <td>1</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "      <td>-0.975098</td>\n",
       "      <td>-0.258789</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20215227</th>\n",
       "      <td>1040</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>6</td>\n",
       "      <td>NaN</td>\n",
       "      <td>526.50</td>\n",
       "      <td>11.750000</td>\n",
       "      <td>4.679688</td>\n",
       "      <td>6.500000</td>\n",
       "      <td>8.0</td>\n",
       "      <td>...</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>116</td>\n",
       "      <td>1</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "      <td>-0.975098</td>\n",
       "      <td>-0.258789</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20215228</th>\n",
       "      <td>1041</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4584.00</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>2.634766</td>\n",
       "      <td>6.500000</td>\n",
       "      <td>8.0</td>\n",
       "      <td>...</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>116</td>\n",
       "      <td>1</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "      <td>-0.975098</td>\n",
       "      <td>-0.258789</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20215229</th>\n",
       "      <td>1042</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>6</td>\n",
       "      <td>NaN</td>\n",
       "      <td>526.50</td>\n",
       "      <td>10.296875</td>\n",
       "      <td>3.003906</td>\n",
       "      <td>6.500000</td>\n",
       "      <td>8.0</td>\n",
       "      <td>...</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>116</td>\n",
       "      <td>1</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "      <td>-0.975098</td>\n",
       "      <td>-0.258789</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20215230</th>\n",
       "      <td>1043</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>6</td>\n",
       "      <td>NaN</td>\n",
       "      <td>526.50</td>\n",
       "      <td>10.234375</td>\n",
       "      <td>2.974609</td>\n",
       "      <td>6.500000</td>\n",
       "      <td>8.0</td>\n",
       "      <td>...</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>116</td>\n",
       "      <td>1</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "      <td>-0.975098</td>\n",
       "      <td>-0.258789</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20215231</th>\n",
       "      <td>1044</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4584.00</td>\n",
       "      <td>11.921875</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>6.500000</td>\n",
       "      <td>8.0</td>\n",
       "      <td>...</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>116</td>\n",
       "      <td>1</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "      <td>-0.975098</td>\n",
       "      <td>-0.258789</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20215232</th>\n",
       "      <td>1045</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>6</td>\n",
       "      <td>NaN</td>\n",
       "      <td>526.50</td>\n",
       "      <td>10.421875</td>\n",
       "      <td>3.072266</td>\n",
       "      <td>6.500000</td>\n",
       "      <td>8.0</td>\n",
       "      <td>...</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>116</td>\n",
       "      <td>1</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "      <td>-0.975098</td>\n",
       "      <td>-0.258789</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20215233</th>\n",
       "      <td>1046</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4584.00</td>\n",
       "      <td>12.210938</td>\n",
       "      <td>5.960938</td>\n",
       "      <td>6.500000</td>\n",
       "      <td>8.0</td>\n",
       "      <td>...</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>116</td>\n",
       "      <td>1</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "      <td>-0.975098</td>\n",
       "      <td>-0.258789</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20215234</th>\n",
       "      <td>1047</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>9</td>\n",
       "      <td>NaN</td>\n",
       "      <td>288.25</td>\n",
       "      <td>12.437500</td>\n",
       "      <td>6.847656</td>\n",
       "      <td>6.500000</td>\n",
       "      <td>8.0</td>\n",
       "      <td>...</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>116</td>\n",
       "      <td>1</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "      <td>-0.975098</td>\n",
       "      <td>-0.258789</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20215235</th>\n",
       "      <td>1048</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4584.00</td>\n",
       "      <td>12.523438</td>\n",
       "      <td>7.238281</td>\n",
       "      <td>6.500000</td>\n",
       "      <td>8.0</td>\n",
       "      <td>...</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>116</td>\n",
       "      <td>1</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "      <td>-0.975098</td>\n",
       "      <td>-0.258789</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20215236</th>\n",
       "      <td>1049</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4584.00</td>\n",
       "      <td>11.453125</td>\n",
       "      <td>4.121094</td>\n",
       "      <td>6.500000</td>\n",
       "      <td>8.0</td>\n",
       "      <td>...</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>116</td>\n",
       "      <td>1</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "      <td>-0.975098</td>\n",
       "      <td>-0.258789</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20215237</th>\n",
       "      <td>1050</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>6</td>\n",
       "      <td>NaN</td>\n",
       "      <td>526.50</td>\n",
       "      <td>10.828125</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>6.500000</td>\n",
       "      <td>8.0</td>\n",
       "      <td>...</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>116</td>\n",
       "      <td>1</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "      <td>-0.975098</td>\n",
       "      <td>-0.258789</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20215238</th>\n",
       "      <td>1051</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4584.00</td>\n",
       "      <td>10.257812</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>6.500000</td>\n",
       "      <td>8.0</td>\n",
       "      <td>...</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>116</td>\n",
       "      <td>1</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "      <td>-0.975098</td>\n",
       "      <td>-0.258789</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20215239</th>\n",
       "      <td>1052</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>11</td>\n",
       "      <td>NaN</td>\n",
       "      <td>139.75</td>\n",
       "      <td>10.718750</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>6.500000</td>\n",
       "      <td>8.0</td>\n",
       "      <td>...</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>116</td>\n",
       "      <td>1</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "      <td>-0.975098</td>\n",
       "      <td>-0.258789</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20215240</th>\n",
       "      <td>1053</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>6</td>\n",
       "      <td>NaN</td>\n",
       "      <td>526.50</td>\n",
       "      <td>9.976562</td>\n",
       "      <td>2.867188</td>\n",
       "      <td>6.500000</td>\n",
       "      <td>8.0</td>\n",
       "      <td>...</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>116</td>\n",
       "      <td>1</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "      <td>-0.975098</td>\n",
       "      <td>-0.258789</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20215241</th>\n",
       "      <td>1054</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4584.00</td>\n",
       "      <td>12.234375</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>6.500000</td>\n",
       "      <td>8.0</td>\n",
       "      <td>...</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>116</td>\n",
       "      <td>1</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "      <td>-0.975098</td>\n",
       "      <td>-0.258789</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20215242</th>\n",
       "      <td>1055</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4584.00</td>\n",
       "      <td>11.367188</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>6.500000</td>\n",
       "      <td>8.0</td>\n",
       "      <td>...</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>116</td>\n",
       "      <td>1</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "      <td>-0.975098</td>\n",
       "      <td>-0.258789</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20215243</th>\n",
       "      <td>1056</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4584.00</td>\n",
       "      <td>11.195312</td>\n",
       "      <td>3.750000</td>\n",
       "      <td>6.500000</td>\n",
       "      <td>8.0</td>\n",
       "      <td>...</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>116</td>\n",
       "      <td>1</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "      <td>-0.975098</td>\n",
       "      <td>-0.258789</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20215244</th>\n",
       "      <td>1057</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4584.00</td>\n",
       "      <td>10.179688</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>6.500000</td>\n",
       "      <td>8.0</td>\n",
       "      <td>...</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>116</td>\n",
       "      <td>1</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "      <td>-0.975098</td>\n",
       "      <td>-0.258789</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20215245</th>\n",
       "      <td>1058</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4584.00</td>\n",
       "      <td>11.343750</td>\n",
       "      <td>3.947266</td>\n",
       "      <td>6.500000</td>\n",
       "      <td>8.0</td>\n",
       "      <td>...</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>116</td>\n",
       "      <td>1</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "      <td>-0.975098</td>\n",
       "      <td>-0.258789</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20215246</th>\n",
       "      <td>1059</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>474.00</td>\n",
       "      <td>11.664062</td>\n",
       "      <td>4.496094</td>\n",
       "      <td>6.500000</td>\n",
       "      <td>8.0</td>\n",
       "      <td>...</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>116</td>\n",
       "      <td>1</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "      <td>-0.975098</td>\n",
       "      <td>-0.258789</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20215247</th>\n",
       "      <td>1060</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>474.00</td>\n",
       "      <td>11.179688</td>\n",
       "      <td>3.730469</td>\n",
       "      <td>6.500000</td>\n",
       "      <td>8.0</td>\n",
       "      <td>...</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>116</td>\n",
       "      <td>1</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "      <td>-0.975098</td>\n",
       "      <td>-0.258789</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20215248</th>\n",
       "      <td>1061</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>11</td>\n",
       "      <td>NaN</td>\n",
       "      <td>139.75</td>\n",
       "      <td>10.695312</td>\n",
       "      <td>3.255859</td>\n",
       "      <td>6.500000</td>\n",
       "      <td>8.0</td>\n",
       "      <td>...</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>116</td>\n",
       "      <td>1</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "      <td>-0.975098</td>\n",
       "      <td>-0.258789</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20215249</th>\n",
       "      <td>1062</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4584.00</td>\n",
       "      <td>11.093750</td>\n",
       "      <td>3.628906</td>\n",
       "      <td>6.500000</td>\n",
       "      <td>8.0</td>\n",
       "      <td>...</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>116</td>\n",
       "      <td>1</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "      <td>-0.975098</td>\n",
       "      <td>-0.258789</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20215250</th>\n",
       "      <td>1063</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4584.00</td>\n",
       "      <td>10.968750</td>\n",
       "      <td>3.496094</td>\n",
       "      <td>6.500000</td>\n",
       "      <td>8.0</td>\n",
       "      <td>...</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>116</td>\n",
       "      <td>1</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "      <td>-0.975098</td>\n",
       "      <td>-0.258789</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20215251</th>\n",
       "      <td>1064</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4584.00</td>\n",
       "      <td>11.781250</td>\n",
       "      <td>4.753906</td>\n",
       "      <td>6.500000</td>\n",
       "      <td>8.0</td>\n",
       "      <td>...</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>116</td>\n",
       "      <td>1</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "      <td>-0.975098</td>\n",
       "      <td>-0.258789</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20215252</th>\n",
       "      <td>1065</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>6</td>\n",
       "      <td>NaN</td>\n",
       "      <td>526.50</td>\n",
       "      <td>9.406250</td>\n",
       "      <td>2.705078</td>\n",
       "      <td>6.500000</td>\n",
       "      <td>8.0</td>\n",
       "      <td>...</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>116</td>\n",
       "      <td>1</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "      <td>-0.975098</td>\n",
       "      <td>-0.258789</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20215253</th>\n",
       "      <td>1066</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4584.00</td>\n",
       "      <td>10.929688</td>\n",
       "      <td>3.455078</td>\n",
       "      <td>6.500000</td>\n",
       "      <td>8.0</td>\n",
       "      <td>...</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>116</td>\n",
       "      <td>1</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "      <td>-0.975098</td>\n",
       "      <td>-0.258789</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20215254</th>\n",
       "      <td>1067</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4584.00</td>\n",
       "      <td>11.742188</td>\n",
       "      <td>4.656250</td>\n",
       "      <td>6.500000</td>\n",
       "      <td>8.0</td>\n",
       "      <td>...</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>116</td>\n",
       "      <td>1</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "      <td>-0.975098</td>\n",
       "      <td>-0.258789</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20215255</th>\n",
       "      <td>1068</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4584.00</td>\n",
       "      <td>11.632812</td>\n",
       "      <td>4.437500</td>\n",
       "      <td>6.500000</td>\n",
       "      <td>8.0</td>\n",
       "      <td>...</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>116</td>\n",
       "      <td>1</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "      <td>-0.975098</td>\n",
       "      <td>-0.258789</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>19766435 rows × 24 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          building_id  meter  site_id  primary_use  year_built  \\\n",
       "103               105      0        1            0         NaN   \n",
       "104               106      0        1            0         NaN   \n",
       "105               106      3        1            0         NaN   \n",
       "106               107      0        1            0      2005.0   \n",
       "107               108      0        1            0      1913.0   \n",
       "108               109      0        1            0      1953.0   \n",
       "109               109      3        1            0      1953.0   \n",
       "110               110      0        1            0      2006.0   \n",
       "111               111      0        1            0      1909.0   \n",
       "112               112      0        1            0         NaN   \n",
       "113               112      3        1            0         NaN   \n",
       "114               113      0        1            0      1958.0   \n",
       "115               113      3        1            0      1958.0   \n",
       "116               114      0        1            0      1958.0   \n",
       "117               114      3        1            0      1958.0   \n",
       "118               115      0        1            0      1968.0   \n",
       "119               116      0        1            0         NaN   \n",
       "120               117      0        1            0      2004.0   \n",
       "121               117      3        1            0      2004.0   \n",
       "122               118      0        1            0      1960.0   \n",
       "123               119      0        1            0      2007.0   \n",
       "124               119      3        1            0      2007.0   \n",
       "125               120      0        1            0      1976.0   \n",
       "126               121      0        1            0      1906.0   \n",
       "127               121      3        1            0      1906.0   \n",
       "128               122      0        1            0      1991.0   \n",
       "129               123      0        1            0      1989.0   \n",
       "130               124      0        1            0      1900.0   \n",
       "131               125      0        1            0      1995.0   \n",
       "132               126      0        1            0      2004.0   \n",
       "...               ...    ...      ...          ...         ...   \n",
       "20215226         1039      0       12            0         NaN   \n",
       "20215227         1040      0       12            6         NaN   \n",
       "20215228         1041      0       12            0         NaN   \n",
       "20215229         1042      0       12            6         NaN   \n",
       "20215230         1043      0       12            6         NaN   \n",
       "20215231         1044      0       12            0         NaN   \n",
       "20215232         1045      0       12            6         NaN   \n",
       "20215233         1046      0       12            0         NaN   \n",
       "20215234         1047      0       12            9         NaN   \n",
       "20215235         1048      0       12            0         NaN   \n",
       "20215236         1049      0       12            0         NaN   \n",
       "20215237         1050      0       12            6         NaN   \n",
       "20215238         1051      0       12            0         NaN   \n",
       "20215239         1052      0       12           11         NaN   \n",
       "20215240         1053      0       12            6         NaN   \n",
       "20215241         1054      0       12            0         NaN   \n",
       "20215242         1055      0       12            0         NaN   \n",
       "20215243         1056      0       12            0         NaN   \n",
       "20215244         1057      0       12            0         NaN   \n",
       "20215245         1058      0       12            0         NaN   \n",
       "20215246         1059      0       12            1         NaN   \n",
       "20215247         1060      0       12            1         NaN   \n",
       "20215248         1061      0       12           11         NaN   \n",
       "20215249         1062      0       12            0         NaN   \n",
       "20215250         1063      0       12            0         NaN   \n",
       "20215251         1064      0       12            0         NaN   \n",
       "20215252         1065      0       12            6         NaN   \n",
       "20215253         1066      0       12            0         NaN   \n",
       "20215254         1067      0       12            0         NaN   \n",
       "20215255         1068      0       12            0         NaN   \n",
       "\n",
       "          primary_use_me  square_feet  floor_count  air_temperature  \\\n",
       "103              4584.00    10.835938     5.000000         3.800781   \n",
       "104              4584.00     8.585938     4.000000         3.800781   \n",
       "105              4584.00     8.585938     4.000000         3.800781   \n",
       "106              4584.00    11.484375    10.000000         3.800781   \n",
       "107              4584.00    11.312500     5.000000         3.800781   \n",
       "108              4584.00    10.953125     6.000000         3.800781   \n",
       "109              4584.00    10.953125     6.000000         3.800781   \n",
       "110              4584.00    10.234375     8.000000         3.800781   \n",
       "111              4584.00    11.679688     7.000000         3.800781   \n",
       "112              4584.00    10.382812     6.000000         3.800781   \n",
       "113              4584.00    10.382812     6.000000         3.800781   \n",
       "114              4584.00    11.515625     9.000000         3.800781   \n",
       "115              4584.00    11.515625     9.000000         3.800781   \n",
       "116              4584.00    11.843750    13.000000         3.800781   \n",
       "117              4584.00    11.843750    13.000000         3.800781   \n",
       "118              4584.00    11.773438     6.000000         3.800781   \n",
       "119              4584.00    10.523438     5.000000         3.800781   \n",
       "120              4584.00     9.648438     4.000000         3.800781   \n",
       "121              4584.00     9.648438     4.000000         3.800781   \n",
       "122              4584.00    11.835938     8.000000         3.800781   \n",
       "123              4584.00    11.421875     7.000000         3.800781   \n",
       "124              4584.00    11.421875     7.000000         3.800781   \n",
       "125              4584.00    11.132812     7.000000         3.800781   \n",
       "126              4584.00    11.921875     9.000000         3.800781   \n",
       "127              4584.00    11.921875     9.000000         3.800781   \n",
       "128              4584.00    11.328125     6.000000         3.800781   \n",
       "129              4584.00    11.023438     6.000000         3.800781   \n",
       "130              4584.00    10.554688     6.000000         3.800781   \n",
       "131              4584.00     9.726562     6.000000         3.800781   \n",
       "132              4584.00     9.976562     5.000000         3.800781   \n",
       "...                  ...          ...          ...              ...   \n",
       "20215226         4584.00    10.312500     3.000000         6.500000   \n",
       "20215227          526.50    11.750000     4.679688         6.500000   \n",
       "20215228         4584.00     9.000000     2.634766         6.500000   \n",
       "20215229          526.50    10.296875     3.003906         6.500000   \n",
       "20215230          526.50    10.234375     2.974609         6.500000   \n",
       "20215231         4584.00    11.921875     4.000000         6.500000   \n",
       "20215232          526.50    10.421875     3.072266         6.500000   \n",
       "20215233         4584.00    12.210938     5.960938         6.500000   \n",
       "20215234          288.25    12.437500     6.847656         6.500000   \n",
       "20215235         4584.00    12.523438     7.238281         6.500000   \n",
       "20215236         4584.00    11.453125     4.121094         6.500000   \n",
       "20215237          526.50    10.828125     2.000000         6.500000   \n",
       "20215238         4584.00    10.257812     1.000000         6.500000   \n",
       "20215239          139.75    10.718750     2.000000         6.500000   \n",
       "20215240          526.50     9.976562     2.867188         6.500000   \n",
       "20215241         4584.00    12.234375     4.000000         6.500000   \n",
       "20215242         4584.00    11.367188     4.000000         6.500000   \n",
       "20215243         4584.00    11.195312     3.750000         6.500000   \n",
       "20215244         4584.00    10.179688     4.000000         6.500000   \n",
       "20215245         4584.00    11.343750     3.947266         6.500000   \n",
       "20215246          474.00    11.664062     4.496094         6.500000   \n",
       "20215247          474.00    11.179688     3.730469         6.500000   \n",
       "20215248          139.75    10.695312     3.255859         6.500000   \n",
       "20215249         4584.00    11.093750     3.628906         6.500000   \n",
       "20215250         4584.00    10.968750     3.496094         6.500000   \n",
       "20215251         4584.00    11.781250     4.753906         6.500000   \n",
       "20215252          526.50     9.406250     2.705078         6.500000   \n",
       "20215253         4584.00    10.929688     3.455078         6.500000   \n",
       "20215254         4584.00    11.742188     4.656250         6.500000   \n",
       "20215255         4584.00    11.632812     4.437500         6.500000   \n",
       "\n",
       "          cloud_coverage  ...  wind_speed  offset  year  is_holiday  \\\n",
       "103                  0.0  ...    3.099609     0.0   116           1   \n",
       "104                  0.0  ...    3.099609     0.0   116           1   \n",
       "105                  0.0  ...    3.099609     0.0   116           1   \n",
       "106                  0.0  ...    3.099609     0.0   116           1   \n",
       "107                  0.0  ...    3.099609     0.0   116           1   \n",
       "108                  0.0  ...    3.099609     0.0   116           1   \n",
       "109                  0.0  ...    3.099609     0.0   116           1   \n",
       "110                  0.0  ...    3.099609     0.0   116           1   \n",
       "111                  0.0  ...    3.099609     0.0   116           1   \n",
       "112                  0.0  ...    3.099609     0.0   116           1   \n",
       "113                  0.0  ...    3.099609     0.0   116           1   \n",
       "114                  0.0  ...    3.099609     0.0   116           1   \n",
       "115                  0.0  ...    3.099609     0.0   116           1   \n",
       "116                  0.0  ...    3.099609     0.0   116           1   \n",
       "117                  0.0  ...    3.099609     0.0   116           1   \n",
       "118                  0.0  ...    3.099609     0.0   116           1   \n",
       "119                  0.0  ...    3.099609     0.0   116           1   \n",
       "120                  0.0  ...    3.099609     0.0   116           1   \n",
       "121                  0.0  ...    3.099609     0.0   116           1   \n",
       "122                  0.0  ...    3.099609     0.0   116           1   \n",
       "123                  0.0  ...    3.099609     0.0   116           1   \n",
       "124                  0.0  ...    3.099609     0.0   116           1   \n",
       "125                  0.0  ...    3.099609     0.0   116           1   \n",
       "126                  0.0  ...    3.099609     0.0   116           1   \n",
       "127                  0.0  ...    3.099609     0.0   116           1   \n",
       "128                  0.0  ...    3.099609     0.0   116           1   \n",
       "129                  0.0  ...    3.099609     0.0   116           1   \n",
       "130                  0.0  ...    3.099609     0.0   116           1   \n",
       "131                  0.0  ...    3.099609     0.0   116           1   \n",
       "132                  0.0  ...    3.099609     0.0   116           1   \n",
       "...                  ...  ...         ...     ...   ...         ...   \n",
       "20215226             8.0  ...    6.000000     0.0   116           1   \n",
       "20215227             8.0  ...    6.000000     0.0   116           1   \n",
       "20215228             8.0  ...    6.000000     0.0   116           1   \n",
       "20215229             8.0  ...    6.000000     0.0   116           1   \n",
       "20215230             8.0  ...    6.000000     0.0   116           1   \n",
       "20215231             8.0  ...    6.000000     0.0   116           1   \n",
       "20215232             8.0  ...    6.000000     0.0   116           1   \n",
       "20215233             8.0  ...    6.000000     0.0   116           1   \n",
       "20215234             8.0  ...    6.000000     0.0   116           1   \n",
       "20215235             8.0  ...    6.000000     0.0   116           1   \n",
       "20215236             8.0  ...    6.000000     0.0   116           1   \n",
       "20215237             8.0  ...    6.000000     0.0   116           1   \n",
       "20215238             8.0  ...    6.000000     0.0   116           1   \n",
       "20215239             8.0  ...    6.000000     0.0   116           1   \n",
       "20215240             8.0  ...    6.000000     0.0   116           1   \n",
       "20215241             8.0  ...    6.000000     0.0   116           1   \n",
       "20215242             8.0  ...    6.000000     0.0   116           1   \n",
       "20215243             8.0  ...    6.000000     0.0   116           1   \n",
       "20215244             8.0  ...    6.000000     0.0   116           1   \n",
       "20215245             8.0  ...    6.000000     0.0   116           1   \n",
       "20215246             8.0  ...    6.000000     0.0   116           1   \n",
       "20215247             8.0  ...    6.000000     0.0   116           1   \n",
       "20215248             8.0  ...    6.000000     0.0   116           1   \n",
       "20215249             8.0  ...    6.000000     0.0   116           1   \n",
       "20215250             8.0  ...    6.000000     0.0   116           1   \n",
       "20215251             8.0  ...    6.000000     0.0   116           1   \n",
       "20215252             8.0  ...    6.000000     0.0   116           1   \n",
       "20215253             8.0  ...    6.000000     0.0   116           1   \n",
       "20215254             8.0  ...    6.000000     0.0   116           1   \n",
       "20215255             8.0  ...    6.000000     0.0   116           1   \n",
       "\n",
       "          beaufort_scale  group  weekday_sin  hour_sin   day_sin  month_sin  \n",
       "103                  2.0      1    -0.433838  0.000000  0.201294        0.5  \n",
       "104                  2.0      1    -0.433838  0.000000  0.201294        0.5  \n",
       "105                  2.0      1    -0.433838  0.000000  0.201294        0.5  \n",
       "106                  2.0      1    -0.433838  0.000000  0.201294        0.5  \n",
       "107                  2.0      1    -0.433838  0.000000  0.201294        0.5  \n",
       "108                  2.0      1    -0.433838  0.000000  0.201294        0.5  \n",
       "109                  2.0      1    -0.433838  0.000000  0.201294        0.5  \n",
       "110                  2.0      1    -0.433838  0.000000  0.201294        0.5  \n",
       "111                  2.0      1    -0.433838  0.000000  0.201294        0.5  \n",
       "112                  2.0      1    -0.433838  0.000000  0.201294        0.5  \n",
       "113                  2.0      1    -0.433838  0.000000  0.201294        0.5  \n",
       "114                  2.0      1    -0.433838  0.000000  0.201294        0.5  \n",
       "115                  2.0      1    -0.433838  0.000000  0.201294        0.5  \n",
       "116                  2.0      1    -0.433838  0.000000  0.201294        0.5  \n",
       "117                  2.0      1    -0.433838  0.000000  0.201294        0.5  \n",
       "118                  2.0      1    -0.433838  0.000000  0.201294        0.5  \n",
       "119                  2.0      1    -0.433838  0.000000  0.201294        0.5  \n",
       "120                  2.0      1    -0.433838  0.000000  0.201294        0.5  \n",
       "121                  2.0      1    -0.433838  0.000000  0.201294        0.5  \n",
       "122                  2.0      1    -0.433838  0.000000  0.201294        0.5  \n",
       "123                  2.0      1    -0.433838  0.000000  0.201294        0.5  \n",
       "124                  2.0      1    -0.433838  0.000000  0.201294        0.5  \n",
       "125                  2.0      1    -0.433838  0.000000  0.201294        0.5  \n",
       "126                  2.0      1    -0.433838  0.000000  0.201294        0.5  \n",
       "127                  2.0      1    -0.433838  0.000000  0.201294        0.5  \n",
       "128                  2.0      1    -0.433838  0.000000  0.201294        0.5  \n",
       "129                  2.0      1    -0.433838  0.000000  0.201294        0.5  \n",
       "130                  2.0      1    -0.433838  0.000000  0.201294        0.5  \n",
       "131                  2.0      1    -0.433838  0.000000  0.201294        0.5  \n",
       "132                  2.0      1    -0.433838  0.000000  0.201294        0.5  \n",
       "...                  ...    ...          ...       ...       ...        ...  \n",
       "20215226             4.0      2    -0.975098 -0.258789 -0.000000       -0.0  \n",
       "20215227             4.0      2    -0.975098 -0.258789 -0.000000       -0.0  \n",
       "20215228             4.0      2    -0.975098 -0.258789 -0.000000       -0.0  \n",
       "20215229             4.0      2    -0.975098 -0.258789 -0.000000       -0.0  \n",
       "20215230             4.0      2    -0.975098 -0.258789 -0.000000       -0.0  \n",
       "20215231             4.0      2    -0.975098 -0.258789 -0.000000       -0.0  \n",
       "20215232             4.0      2    -0.975098 -0.258789 -0.000000       -0.0  \n",
       "20215233             4.0      2    -0.975098 -0.258789 -0.000000       -0.0  \n",
       "20215234             4.0      2    -0.975098 -0.258789 -0.000000       -0.0  \n",
       "20215235             4.0      2    -0.975098 -0.258789 -0.000000       -0.0  \n",
       "20215236             4.0      2    -0.975098 -0.258789 -0.000000       -0.0  \n",
       "20215237             4.0      2    -0.975098 -0.258789 -0.000000       -0.0  \n",
       "20215238             4.0      2    -0.975098 -0.258789 -0.000000       -0.0  \n",
       "20215239             4.0      2    -0.975098 -0.258789 -0.000000       -0.0  \n",
       "20215240             4.0      2    -0.975098 -0.258789 -0.000000       -0.0  \n",
       "20215241             4.0      2    -0.975098 -0.258789 -0.000000       -0.0  \n",
       "20215242             4.0      2    -0.975098 -0.258789 -0.000000       -0.0  \n",
       "20215243             4.0      2    -0.975098 -0.258789 -0.000000       -0.0  \n",
       "20215244             4.0      2    -0.975098 -0.258789 -0.000000       -0.0  \n",
       "20215245             4.0      2    -0.975098 -0.258789 -0.000000       -0.0  \n",
       "20215246             4.0      2    -0.975098 -0.258789 -0.000000       -0.0  \n",
       "20215247             4.0      2    -0.975098 -0.258789 -0.000000       -0.0  \n",
       "20215248             4.0      2    -0.975098 -0.258789 -0.000000       -0.0  \n",
       "20215249             4.0      2    -0.975098 -0.258789 -0.000000       -0.0  \n",
       "20215250             4.0      2    -0.975098 -0.258789 -0.000000       -0.0  \n",
       "20215251             4.0      2    -0.975098 -0.258789 -0.000000       -0.0  \n",
       "20215252             4.0      2    -0.975098 -0.258789 -0.000000       -0.0  \n",
       "20215253             4.0      2    -0.975098 -0.258789 -0.000000       -0.0  \n",
       "20215254             4.0      2    -0.975098 -0.258789 -0.000000       -0.0  \n",
       "20215255             4.0      2    -0.975098 -0.258789 -0.000000       -0.0  \n",
       "\n",
       "[19766435 rows x 24 columns]"
      ]
     },
     "execution_count": 263,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "full_train_df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###### Set Categorical Values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 322,
   "metadata": {},
   "outputs": [],
   "source": [
    "categoricals = ['site_id', 'building_id', 'primary_use', 'meter',  'wind_direction', 'is_holiday']\n",
    "drop_cols = ['sea_level_pressure', 'wind_speed']\n",
    "numericals = ['square_feet', 'year_built', 'air_temperature', 'cloud_coverage',\n",
    "              'dew_temperature', 'precip_depth_1_hr', 'floor_count', 'beaufort_scale', 'weekday_sin', 'day_sin', 'hour_sin', 'month_sin','primary_use_me']\n",
    "\n",
    "feat_cols = categoricals + numericals"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###### Define Target"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 323,
   "metadata": {},
   "outputs": [],
   "source": [
    "target = full_train_df[\"meter_reading\"]\n",
    "del full_train_df[\"meter_reading\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 324,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "74"
      ]
     },
     "execution_count": 324,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "full_train_df.drop(drop_cols, axis=1)\n",
    "gc.collect()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'full_train_df' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-45-f086bd035238>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mfull_train_df\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhead\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m: name 'full_train_df' is not defined"
     ]
    }
   ],
   "source": [
    "full_train_df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###### Set Parameters for LGBM"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 325,
   "metadata": {},
   "outputs": [],
   "source": [
    "params = {\n",
    "            'boosting_type': 'gbdt',\n",
    "            'objective': 'regression',\n",
    "            'metric': {'rmse'},\n",
    "            'subsample': 0.4,\n",
    "            'subsample_freq': 1,\n",
    "            'learning_rate': 0.25,\n",
    "            'num_leaves': 31,\n",
    "            'feature_fraction': 0.8,\n",
    "            'lambda_l1': 1,\n",
    "            'lambda_l2': 1\n",
    "            }\n",
    "\n",
    "folds = 2\n",
    "seed = 666"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###### Function: Split Data by Meter Type"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def create_X_y(train_df, target_meter):\n",
    "    target_train_df = train_df[train_df['meter'] == target_meter]\n",
    "    target_train_df = target_train_df.merge(building_meta_df, on='building_id', how='left')\n",
    "    target_train_df = target_train_df.merge(weather_train_df, on=['site_id', 'timestamp'], how='left')\n",
    "    X_train = target_train_df[feature_cols + category_cols]\n",
    "    y_train = target_train_df['meter_reading_log1p'].values\n",
    "\n",
    "    del target_train_df\n",
    "    return X_train, y_train"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###### Function: Train Model by Meter Type"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def fit_lgbm(train, val, devices=(-1,), seed=None, cat_features=None, num_rounds=1500, lr=0.1, bf=0.1):\n",
    "    \"\"\"Train Light GBM model\"\"\"\n",
    "    X_train, y_train = train\n",
    "    X_valid, y_valid = val\n",
    "    metric = 'rmse'\n",
    "    params = {'num_leaves': 31,\n",
    "              'objective': 'regression',\n",
    "#               'max_depth': -1,\n",
    "              'learning_rate': lr,\n",
    "              \"boosting\": \"gbdt\",\n",
    "              \"bagging_freq\": 5,\n",
    "              \"bagging_fraction\": bf,\n",
    "              \"feature_fraction\": 0.9,\n",
    "              \"metric\": metric,\n",
    "#               \"verbosity\": -1,\n",
    "#               'reg_alpha': 0.1,\n",
    "#               'reg_lambda': 0.3\n",
    "              }\n",
    "    device = devices[0]\n",
    "    if device == -1:\n",
    "        # use cpu\n",
    "        pass\n",
    "    else:\n",
    "        # use gpu\n",
    "        print(f'using gpu device_id {device}...')\n",
    "        params.update({'device': 'gpu', 'gpu_device_id': device})\n",
    "\n",
    "    params['seed'] = seed\n",
    "\n",
    "    early_stop = 20\n",
    "    verbose_eval = 20\n",
    "\n",
    "    d_train = lgb.Dataset(X_train, label=y_train, categorical_feature=cat_features)\n",
    "    d_valid = lgb.Dataset(X_valid, label=y_valid, categorical_feature=cat_features)\n",
    "    watchlist = [d_train, d_valid]\n",
    "\n",
    "    print('training LGB:')\n",
    "    model = lgb.train(params,\n",
    "                      train_set=d_train,\n",
    "                      num_boost_round=num_rounds,\n",
    "                      valid_sets=watchlist,\n",
    "                      verbose_eval=verbose_eval,\n",
    "                      early_stopping_rounds=early_stop)\n",
    "\n",
    "    # predictions\n",
    "    y_pred_valid = model.predict(X_valid, num_iteration=model.best_iteration)\n",
    "    \n",
    "    print('best_score', model.best_score)\n",
    "    log = {'train/mae': model.best_score['training']['l2'],\n",
    "           'valid/mae': model.best_score['valid_1']['l2']}\n",
    "    return model, y_pred_valid, log"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "target_meter = 0\n",
    "X_train, y_train = create_X_y(full_train_df, target_meter=target_meter)\n",
    "y_valid_pred_total = np.zeros(X_train.shape[0])\n",
    "gc.collect()\n",
    "print('target_meter', target_meter, X_train.shape)\n",
    "\n",
    "cat_features = [X_train.columns.get_loc(cat_col) for cat_col in category_cols]\n",
    "print('cat_features', cat_features)\n",
    "\n",
    "models0 = []\n",
    "for train_idx, valid_idx in kf.split(X_train, y_train):\n",
    "    train_data = X_train.iloc[train_idx,:], y_train[train_idx]\n",
    "    valid_data = X_train.iloc[valid_idx,:], y_train[valid_idx]\n",
    "\n",
    "    print('train', len(train_idx), 'valid', len(valid_idx))\n",
    "#     model, y_pred_valid, log = fit_cb(train_data, valid_data, cat_features=cat_features, devices=[0,])\n",
    "    model, y_pred_valid, log = fit_lgbm(train_data, valid_data, cat_features=category_cols,\n",
    "                                        num_rounds=1000, lr=0.05, bf=0.7)\n",
    "    y_valid_pred_total[valid_idx] = y_pred_valid\n",
    "    models0.append(model)\n",
    "    gc.collect()\n",
    "    if debug:\n",
    "        break\n",
    "\n",
    "sns.distplot(y_train)\n",
    "del X_train, y_train\n",
    "gc.collect()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "target_meter = 1\n",
    "X_train, y_train = create_X_y(full_train_df, target_meter=target_meter)\n",
    "y_valid_pred_total = np.zeros(X_train.shape[0])\n",
    "gc.collect()\n",
    "print('target_meter', target_meter, X_train.shape)\n",
    "\n",
    "cat_features = [X_train.columns.get_loc(cat_col) for cat_col in category_cols]\n",
    "print('cat_features', cat_features)\n",
    "\n",
    "models1 = []\n",
    "for train_idx, valid_idx in kf.split(X_train, y_train):\n",
    "    train_data = X_train.iloc[train_idx,:], y_train[train_idx]\n",
    "    valid_data = X_train.iloc[valid_idx,:], y_train[valid_idx]\n",
    "\n",
    "    print('train', len(train_idx), 'valid', len(valid_idx))\n",
    "#     model, y_pred_valid, log = fit_cb(train_data, valid_data, cat_features=cat_features, devices=[0,])\n",
    "    model, y_pred_valid, log = fit_lgbm(train_data, valid_data, cat_features=category_cols, num_rounds=1000,\n",
    "                                       lr=0.05, bf=0.5)\n",
    "    y_valid_pred_total[valid_idx] = y_pred_valid\n",
    "    models1.append(model)\n",
    "    gc.collect()\n",
    "    if debug:\n",
    "        break\n",
    "\n",
    "sns.distplot(y_train)\n",
    "del X_train, y_train\n",
    "gc.collect()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "target_meter = 2\n",
    "X_train, y_train = create_X_y(full_train_df, target_meter=target_meter)\n",
    "y_valid_pred_total = np.zeros(X_train.shape[0])\n",
    "\n",
    "gc.collect()\n",
    "print('target_meter', target_meter, X_train.shape)\n",
    "\n",
    "cat_features = [X_train.columns.get_loc(cat_col) for cat_col in category_cols]\n",
    "print('cat_features', cat_features)\n",
    "\n",
    "models2 = []\n",
    "for train_idx, valid_idx in kf.split(X_train, y_train):\n",
    "    train_data = X_train.iloc[train_idx,:], y_train[train_idx]\n",
    "    valid_data = X_train.iloc[valid_idx,:], y_train[valid_idx]\n",
    "\n",
    "    print('train', len(train_idx), 'valid', len(valid_idx))\n",
    "#     model, y_pred_valid, log = fit_cb(train_data, valid_data, cat_features=cat_features, devices=[0,])\n",
    "    model, y_pred_valid, log = fit_lgbm(train_data, valid_data, cat_features=category_cols,\n",
    "                                        num_rounds=1000, lr=0.05, bf=0.8)\n",
    "    y_valid_pred_total[valid_idx] = y_pred_valid\n",
    "    models2.append(model)\n",
    "    gc.collect()\n",
    "    if debug:\n",
    "        break\n",
    "\n",
    "sns.distplot(y_train)\n",
    "del X_train, y_train\n",
    "gc.collect()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "target_meter = 3\n",
    "X_train, y_train = create_X_y(full_train_df, target_meter=target_meter)\n",
    "y_valid_pred_total = np.zeros(X_train.shape[0])\n",
    "\n",
    "gc.collect()\n",
    "print('target_meter', target_meter, X_train.shape)\n",
    "\n",
    "cat_features = [X_train.columns.get_loc(cat_col) for cat_col in category_cols]\n",
    "print('cat_features', cat_features)\n",
    "\n",
    "models3 = []\n",
    "for train_idx, valid_idx in kf.split(X_train, y_train):\n",
    "    train_data = X_train.iloc[train_idx,:], y_train[train_idx]\n",
    "    valid_data = X_train.iloc[valid_idx,:], y_train[valid_idx]\n",
    "\n",
    "    print('train', len(train_idx), 'valid', len(valid_idx))\n",
    "#     model, y_pred_valid, log = fit_cb(train_data, valid_data, cat_features=cat_features, devices=[0,])\n",
    "    model, y_pred_valid, log = fit_lgbm(train_data, valid_data, cat_features=category_cols, num_rounds=1000,\n",
    "                                       lr=0.03, bf=0.9)\n",
    "    y_valid_pred_total[valid_idx] = y_pred_valid\n",
    "    models3.append(model)\n",
    "    gc.collect()\n",
    "    if debug:\n",
    "        break\n",
    "\n",
    "sns.distplot(y_train)\n",
    "del X_train, y_train\n",
    "gc.collect()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "kf = GroupKFold(n_splits=folds)\n",
    "\n",
    "models = []\n",
    "for train_index, val_index in kf.split(full_train_df, full_train_df['building_id'], groups=full_train_df['group']):\n",
    "    train_X, train_y = full_train_df[feat_cols].loc[train_index], full_train_df['meter_reading'][train_index]\n",
    "    val_X, val_y = full_train_df[feat_cols].loc[val_index], full_train_df['meter_reading'][val_index]\n",
    "    train_X = full_train_df[feat_cols].iloc[train_index]\n",
    "    val_X = full_train_df[feat_cols].iloc[val_index]\n",
    "    train_y = target.iloc[train_index]\n",
    "    val_y = target.iloc[val_index]\n",
    "    lgb_train = lgb.Dataset(train_X, train_y, categorical_feature=categoricals)\n",
    "    lgb_eval = lgb.Dataset(val_X, val_y, categorical_feature=categoricals)\n",
    "    gbm = lgb.train(params,\n",
    "                lgb_train,\n",
    "                num_boost_round=500,\n",
    "                valid_sets=(lgb_train, lgb_eval),\n",
    "                early_stopping_rounds=100,\n",
    "                verbose_eval = 100)\n",
    "    models.append(gbm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 327,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 792x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "_ = lgb.plot_importance(models[0], importance_type='gain')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 256,
   "metadata": {},
   "outputs": [],
   "source": [
    "for item in beaufort:\n",
    "    full_test_df.loc[(full_test_df['wind_speed']>=item[1]) & (full_test_df['wind_speed']<item[2]), 'beaufort_scale'] = item[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 257,
   "metadata": {},
   "outputs": [],
   "source": [
    "full_test_df = encode_cyclic_feature(full_test_df, 'weekday', 7)\n",
    "full_test_df = encode_cyclic_feature(full_test_df, 'hour', 24)\n",
    "full_test_df = encode_cyclic_feature(full_test_df, 'day', 31)\n",
    "full_test_df = encode_cyclic_feature(full_test_df, 'month', 12)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 258,
   "metadata": {},
   "outputs": [],
   "source": [
    "full_test_df = full_test_df[feat_cols]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 259,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mem. usage decreased to 1670.17 Mb (41.7% reduction)\n"
     ]
    }
   ],
   "source": [
    "full_test_df = reduce_mem_usage(full_test_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 260,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 834/834 [03:31<00:00,  3.87it/s]\n"
     ]
    }
   ],
   "source": [
    "i=0\n",
    "res=[]\n",
    "step_size = 50000\n",
    "for j in tqdm(range(int(np.ceil(full_test_df.shape[0]/50000)))):\n",
    "    res.append(np.expm1(sum([model.predict(full_test_df.iloc[i:i+step_size]) for model in models])/folds))\n",
    "    i+=step_size"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 261,
   "metadata": {},
   "outputs": [],
   "source": [
    "res = np.concatenate(res)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 262,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>row_id</th>\n",
       "      <th>meter_reading</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>118.406339</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>56.626898</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>15.252236</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>171.188926</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>779.436915</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>5</td>\n",
       "      <td>19.701761</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>6</td>\n",
       "      <td>76.482050</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>7</td>\n",
       "      <td>390.319421</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>8</td>\n",
       "      <td>1041.405776</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>9</td>\n",
       "      <td>182.462341</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>10</td>\n",
       "      <td>44.674577</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>11</td>\n",
       "      <td>8.396149</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>12</td>\n",
       "      <td>910.435563</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>13</td>\n",
       "      <td>179.086764</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>14</td>\n",
       "      <td>124.597415</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>15</td>\n",
       "      <td>86.541381</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>16</td>\n",
       "      <td>49.011971</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>17</td>\n",
       "      <td>280.943026</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>18</td>\n",
       "      <td>578.644041</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>19</td>\n",
       "      <td>237.091680</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>20</td>\n",
       "      <td>429.181150</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>21</td>\n",
       "      <td>418.671386</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>22</td>\n",
       "      <td>66.775950</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>23</td>\n",
       "      <td>644.881898</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>24</td>\n",
       "      <td>122.815980</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>25</td>\n",
       "      <td>251.111926</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>26</td>\n",
       "      <td>53.468012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>27</td>\n",
       "      <td>23.754497</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>28</td>\n",
       "      <td>584.434522</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>29</td>\n",
       "      <td>349.615175</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41697570</th>\n",
       "      <td>41697570</td>\n",
       "      <td>1324.035972</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41697571</th>\n",
       "      <td>41697571</td>\n",
       "      <td>41.845716</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41697572</th>\n",
       "      <td>41697572</td>\n",
       "      <td>30.329194</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41697573</th>\n",
       "      <td>41697573</td>\n",
       "      <td>377.604570</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41697574</th>\n",
       "      <td>41697574</td>\n",
       "      <td>166.060119</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41697575</th>\n",
       "      <td>41697575</td>\n",
       "      <td>132.479242</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41697576</th>\n",
       "      <td>41697576</td>\n",
       "      <td>184.976168</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41697577</th>\n",
       "      <td>41697577</td>\n",
       "      <td>488.347390</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41697578</th>\n",
       "      <td>41697578</td>\n",
       "      <td>53.183038</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41697579</th>\n",
       "      <td>41697579</td>\n",
       "      <td>387.759358</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41697580</th>\n",
       "      <td>41697580</td>\n",
       "      <td>72.209139</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41697581</th>\n",
       "      <td>41697581</td>\n",
       "      <td>153.634381</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41697582</th>\n",
       "      <td>41697582</td>\n",
       "      <td>5.879525</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41697583</th>\n",
       "      <td>41697583</td>\n",
       "      <td>14.483661</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41697584</th>\n",
       "      <td>41697584</td>\n",
       "      <td>627.128241</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41697585</th>\n",
       "      <td>41697585</td>\n",
       "      <td>354.660804</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41697586</th>\n",
       "      <td>41697586</td>\n",
       "      <td>418.236123</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41697587</th>\n",
       "      <td>41697587</td>\n",
       "      <td>163.006328</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41697588</th>\n",
       "      <td>41697588</td>\n",
       "      <td>317.739896</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41697589</th>\n",
       "      <td>41697589</td>\n",
       "      <td>179.541062</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41697590</th>\n",
       "      <td>41697590</td>\n",
       "      <td>239.696153</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41697591</th>\n",
       "      <td>41697591</td>\n",
       "      <td>268.379990</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41697592</th>\n",
       "      <td>41697592</td>\n",
       "      <td>62.616490</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41697593</th>\n",
       "      <td>41697593</td>\n",
       "      <td>4.568683</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41697594</th>\n",
       "      <td>41697594</td>\n",
       "      <td>87.203974</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41697595</th>\n",
       "      <td>41697595</td>\n",
       "      <td>6.308141</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41697596</th>\n",
       "      <td>41697596</td>\n",
       "      <td>4.371836</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41697597</th>\n",
       "      <td>41697597</td>\n",
       "      <td>2.037297</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41697598</th>\n",
       "      <td>41697598</td>\n",
       "      <td>164.553751</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41697599</th>\n",
       "      <td>41697599</td>\n",
       "      <td>3.155095</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>41697600 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            row_id  meter_reading\n",
       "0                0     118.406339\n",
       "1                1      56.626898\n",
       "2                2      15.252236\n",
       "3                3     171.188926\n",
       "4                4     779.436915\n",
       "5                5      19.701761\n",
       "6                6      76.482050\n",
       "7                7     390.319421\n",
       "8                8    1041.405776\n",
       "9                9     182.462341\n",
       "10              10      44.674577\n",
       "11              11       8.396149\n",
       "12              12     910.435563\n",
       "13              13     179.086764\n",
       "14              14     124.597415\n",
       "15              15      86.541381\n",
       "16              16      49.011971\n",
       "17              17     280.943026\n",
       "18              18     578.644041\n",
       "19              19     237.091680\n",
       "20              20     429.181150\n",
       "21              21     418.671386\n",
       "22              22      66.775950\n",
       "23              23     644.881898\n",
       "24              24     122.815980\n",
       "25              25     251.111926\n",
       "26              26      53.468012\n",
       "27              27      23.754497\n",
       "28              28     584.434522\n",
       "29              29     349.615175\n",
       "...            ...            ...\n",
       "41697570  41697570    1324.035972\n",
       "41697571  41697571      41.845716\n",
       "41697572  41697572      30.329194\n",
       "41697573  41697573     377.604570\n",
       "41697574  41697574     166.060119\n",
       "41697575  41697575     132.479242\n",
       "41697576  41697576     184.976168\n",
       "41697577  41697577     488.347390\n",
       "41697578  41697578      53.183038\n",
       "41697579  41697579     387.759358\n",
       "41697580  41697580      72.209139\n",
       "41697581  41697581     153.634381\n",
       "41697582  41697582       5.879525\n",
       "41697583  41697583      14.483661\n",
       "41697584  41697584     627.128241\n",
       "41697585  41697585     354.660804\n",
       "41697586  41697586     418.236123\n",
       "41697587  41697587     163.006328\n",
       "41697588  41697588     317.739896\n",
       "41697589  41697589     179.541062\n",
       "41697590  41697590     239.696153\n",
       "41697591  41697591     268.379990\n",
       "41697592  41697592      62.616490\n",
       "41697593  41697593       4.568683\n",
       "41697594  41697594      87.203974\n",
       "41697595  41697595       6.308141\n",
       "41697596  41697596       4.371836\n",
       "41697597  41697597       2.037297\n",
       "41697598  41697598     164.553751\n",
       "41697599  41697599       3.155095\n",
       "\n",
       "[41697600 rows x 2 columns]"
      ]
     },
     "execution_count": 262,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "submissiona = pd.read_csv('/Users/feihuyan/Downloads/EnergyData/sample_submission.csv')\n",
    "submissiona['meter_reading'] = res\n",
    "submissiona.loc[submissiona['meter_reading']<0, 'meter_reading'] = 0\n",
    "submissiona.to_csv('submission_fe_lgbm.csv', index=False)\n",
    "submissiona"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
